<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MATLAB计算</title>
    <url>/2019/12/31/MATLAB%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="MATLAB计算"><a href="#MATLAB计算" class="headerlink" title="MATLAB计算"></a>MATLAB计算</h1><p>关于matlab的数值计算以及符号计算问题。</p>
<a id="more"></a>
<h2 id="一、因式分解"><a href="#一、因式分解" class="headerlink" title="一、因式分解"></a>一、因式分解</h2><h3 id="1-矩阵基础计算"><a href="#1-矩阵基础计算" class="headerlink" title="1.矩阵基础计算"></a>1.矩阵基础计算</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">2</span>; <span class="number">1</span>; <span class="number">4</span>]; c= <span class="number">3</span>; b=c*a     <span class="comment">% b=[6; 3; 12],数量乘法</span></span><br><span class="line">y=a'                       <span class="comment">%转置</span></span><br><span class="line">d=C.'               <span class="comment">%转置复数矩阵不计算元素共轭值</span></span><br><span class="line">A.^K  A^k           <span class="comment">%数组A每个元素k次方     K个矩阵A相乘</span></span><br><span class="line">k.^A  k^A           <span class="comment">%K为底，A元素为幂       矩的阵幂</span></span><br><span class="line">A.*B                <span class="comment">%数组相乘而不是矩阵</span></span><br><span class="line">A\B   B/A           <span class="comment">%AX=B的解       XA=B的解</span></span><br><span class="line">A./B=B./A           <span class="comment">%数组元素与元素匹配相除</span></span><br><span class="line">C = A +(-) B        <span class="comment">%向量相加减（长度，类型都相同）</span></span><br><span class="line">A=[A; B]  T=[R, S]  <span class="comment">%矩阵合并</span></span><br><span class="line">Y=<span class="built_in">exp</span>(x); Z=x.^<span class="number">2</span>    <span class="comment">%向量的乘方必须在幂运算符前（^）前加上句（.）</span></span><br><span class="line"><span class="built_in">linspace</span>(a,b,n)     <span class="comment">%创建了 a、b 之间含有 n 个等差元素的向量,无n默认100</span></span><br><span class="line"><span class="built_in">logspace</span>(a,b,n)     <span class="comment">%创建 n 个对数值相隔相同的行向量</span></span><br><span class="line">norm(x)             <span class="comment">%求向量范数</span></span><br></pre></td></tr></table></figure>
<h3 id="2-行列式、逆和秩"><a href="#2-行列式、逆和秩" class="headerlink" title="2.行列式、逆和秩"></a>2.行列式、逆和秩</h3><p>逆矩阵: AB=BA=E    伪逆矩阵：BA=E ,AB!=E</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">det(A)    <span class="comment">%矩阵行列式值--必须为方阵    det(A^-1)=1/det(A)</span></span><br><span class="line">rank(A)    <span class="comment">%矩阵秩</span></span><br><span class="line">inv(A)     <span class="comment">%方阵A的逆矩阵B=A^-1  INF表示矩阵值为0，不存在逆矩阵</span></span><br><span class="line">pinv(A)    <span class="comment">%矩阵伪逆</span></span><br><span class="line">trance(A)   <span class="comment">%矩阵迹，即对角线元素和</span></span><br></pre></td></tr></table></figure>
<h3 id="3-矩阵分解"><a href="#3-矩阵分解" class="headerlink" title="3.矩阵分解"></a>3.矩阵分解</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R=chol(A)       <span class="comment">%cholesky分解:A=R'R, A是对称且正定的   Ax=b--R'Rx=b---x=R\(R'\b)</span></span><br><span class="line">[L,U]=lu(A)     <span class="comment">% L单位对角线的下三角矩阵  U上三角矩阵  Ax=b---x=U\(L\b)</span></span><br><span class="line">[Q,R]=qr(A)     <span class="comment">%正交矩阵A，Q单位正交矩阵，R上三角矩阵  </span></span><br><span class="line">[Q1,R1]=gradelete(Q,R,<span class="built_in">j</span>)   <span class="comment">%去掉A的j列后矩阵QR分解</span></span><br><span class="line">[Q1,R1]=qrinset(Q,R,b,<span class="built_in">j</span>)   <span class="comment">%在A的j列前插入列向量b，然后QR分解</span></span><br></pre></td></tr></table></figure>
<h3 id="4-矩阵特征值和奇异值"><a href="#4-矩阵特征值和奇异值" class="headerlink" title="4.矩阵特征值和奇异值"></a>4.矩阵特征值和奇异值</h3><p>n阶方阵A，数λ和向量X，AX=λA成立，λ为A特征值，X为A特征向量。（A-λI)X有非0解X———丨A-λI丨=0</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">E=eig（A)                         <span class="comment">%矩阵A全部特征值构成E</span></span><br><span class="line">[V,D]=eig(A)                      <span class="comment">%矩阵A全部特征值构成对角矩阵D，A特征向量构成V列向量</span></span><br><span class="line">[V,D]=eig(A,<span class="string">'nobalance'</span>)          <span class="comment">%同上</span></span><br></pre></td></tr></table></figure>
<p>两矢量u，v,常熟s，矩阵A满足：Av=su,A’u=sv;  s为奇异值—-对角方阵∑，U,V为奇异矢量</p>
<p>AV=U∑   A’U=V∑      U,V正交—-A=U∑V’      奇异值分解 <code>[U,S,V]=svd(A)</code></p>
<h2 id="二、概率统计"><a href="#二、概率统计" class="headerlink" title="二、概率统计"></a>二、概率统计</h2><h3 id="1-基本分析函数"><a href="#1-基本分析函数" class="headerlink" title="1.基本分析函数"></a>1.基本分析函数</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">B=sum(A)      B=sum(A,dim)      <span class="comment">%向量元素和或矩阵各列元素和   矩阵第dim维元素和</span></span><br><span class="line"></span><br><span class="line">B=cumsum(A)                     <span class="comment">%向量元素积和或矩阵各列元素积和  </span></span><br><span class="line">B=cumsum(A,dim)                  <span class="comment">% dim=1列方向求积和 dim=2行方向求积和</span></span><br><span class="line"></span><br><span class="line">B=prod(A)    B=prod(A,dim)        <span class="comment">%向量积或矩阵列元素积       矩阵第dim维元素积</span></span><br><span class="line"></span><br><span class="line">B=cumprod(A)  B=cumprod(A,dim)     <span class="comment">%累积乘积   dim=1列方向 dim=2 行方向</span></span><br><span class="line"></span><br><span class="line">B=<span class="built_in">sort</span>(A)    B=<span class="built_in">sort</span>(A,mode)       <span class="comment">%默认升序排序   mode为'ascend'表升序,'descend'表降序</span></span><br><span class="line"></span><br><span class="line">B=<span class="built_in">sortrows</span>(A)  B=<span class="built_in">sortrows</span>(A,column)   <span class="comment">%按行对A升序排序   基于向量column指定列排序 负号表降序</span></span><br><span class="line"></span><br><span class="line">C=<span class="built_in">max</span>(A) C=<span class="built_in">min</span>(A)                 <span class="comment">%返回向量最大元素或矩阵各列向量最大值（最小）</span></span><br><span class="line"></span><br><span class="line">M=<span class="built_in">mean</span>(A)                        <span class="comment">%平均值</span></span><br><span class="line">M=median(A)                      <span class="comment">%中值</span></span><br><span class="line">S=std(A)   S=std(A,flag)         <span class="comment">%标准差（falg取1/0表示两种方法）</span></span><br><span class="line">V=var(X)   V=var(X,<span class="number">1</span>)            <span class="comment">%方差（两种方法）</span></span><br><span class="line">C=cov(X)   C=cov(x,y)            <span class="comment">%协方差</span></span><br><span class="line"></span><br><span class="line">[r,p]=corrcoef(X)   [r,p]=corrcoef(x,y)      <span class="comment">%矩阵相关系数</span></span><br></pre></td></tr></table></figure>
<h3 id="2、概率函数、分布函数、逆分布函数和随机数"><a href="#2、概率函数、分布函数、逆分布函数和随机数" class="headerlink" title="2、概率函数、分布函数、逆分布函数和随机数"></a>2、概率函数、分布函数、逆分布函数和随机数</h3><p>PMF(probability mass function)               <strong>概率质量函数</strong>       离散变量<br>PDF Probability density function             <strong>概率密度函数</strong>        连续变量<br>CDF(cumulative distribution function)    <strong>累积分布函数 </strong>       F(X)=P(X&lt;=x)</p>
<p>Bernoulli distribution                                <strong>伯努利分布</strong>           也称为两点分布或者0-1分布</p>
<script type="math/tex; mode=display">
概率质量函数:P(x)=p^x(1-p)^{1-x}=\begin{cases} p，x=1\\ q， x=0\end{cases}</script><script type="math/tex; mode=display">
期望值:E(x)=\sum{xP(x)}=0\cdot q+1\cdot p=p</script><script type="math/tex; mode=display">
方差:Var(x)=E[(x-E(X)^2)]=\sum{(x-p)^2}P(x)=pq</script><p>Binomial distribution                   <strong>二项分布 </strong>           n次伯努利实验，成功概率为p，成功x次概率表示为</p>
<script type="math/tex; mode=display">
P(x)=C_n^xp^x(1-p)^{n-x}=\frac{n!}{x!(n-x)!}p^x(1-p)^{n-x}</script><p>均值为np，方差为npq。matlab中关于二项分布三个常用指令如下</p>
<p>Poisson distribution                      <strong>泊松分布</strong>           描述单位时间内随机事件发生的次数的概率分布，计λ为单位时间（或单位面积）内随机事件的平均发生率。期望和方差均为 λ。当二项分布n很大p很小时，泊松分布可作二项分布的近似，λ=np</p>
<script type="math/tex; mode=display">
概率质量函数：P(X=k)=\frac{e^{-\lambda}\lambda^k}{k!}</script><p>standard normal distribution           <strong>正态分布</strong>            期望值μ=0，即曲线图象对称轴为Y轴，标准差σ=1条件下的正态分布，记为N(0，1)。正态分布关于平均数对称。</p>
<p>uniform distribution                         <strong>均匀分布</strong>            在相同长度间隔的分布概率相等，由两个参数a，b定义。</p>
<script type="math/tex; mode=display">
概率质量函数:f(x)=\begin{cases} \frac{1}{b-a},a<x<b\\ 0,else\end{cases}</script><script type="math/tex; mode=display">
概率累积分布函数：F(x)=\begin{cases}0,x<a \\ \frac{x-a}{b-a},a\leq x\leq b \\ 1,x>b \end{cases}</script><p>chi-square distribution                     <strong>χ²分布</strong>            若n个相互独立的随机变量ξ₁，ξ₂，…,ξn ，均服从标准正态分布，则这n个服从标准正态分布的随机变量的平方和构成一新的随机变量，其分布规律称为卡方分布。</p>
<p>F-distribution                             <strong>F分布</strong>                    （看不太懂）</p>
<p>t-distribution                              <strong>t分布</strong>                  用于根据小样本来估计呈正态分布且方差未知的总体的均值。如果总体方差已知（例如在样本数量足够多时），则应该用正态分布来估计总体均值。</p>
<p>常见分布的相关函数</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">分布名称</th>
<th style="text-align:center">概率密度函数</th>
<th style="text-align:center">累积分布函数</th>
<th style="text-align:center">逆累积分布函数</th>
<th style="text-align:center">随机数发生器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">二项分布</td>
<td style="text-align:center">binopdf</td>
<td style="text-align:center">binocdf</td>
<td style="text-align:center">binoinv</td>
<td style="text-align:center">binornd</td>
</tr>
<tr>
<td style="text-align:center">泊松分布</td>
<td style="text-align:center">poisspdf</td>
<td style="text-align:center">poisscdf</td>
<td style="text-align:center">poissinv</td>
<td style="text-align:center">poissrnd</td>
</tr>
<tr>
<td style="text-align:center">正态分布</td>
<td style="text-align:center">normpdf</td>
<td style="text-align:center">normcdf</td>
<td style="text-align:center">norminv</td>
<td style="text-align:center">normrnd</td>
</tr>
<tr>
<td style="text-align:center">均匀分布</td>
<td style="text-align:center">unifpdf</td>
<td style="text-align:center">unifcdf</td>
<td style="text-align:center">unifinv</td>
<td style="text-align:center">unifrnd</td>
</tr>
<tr>
<td style="text-align:center">X^2分布</td>
<td style="text-align:center">chi2pdf</td>
<td style="text-align:center">chi2cdf</td>
<td style="text-align:center">chi2inv</td>
<td style="text-align:center">chi2rnd</td>
</tr>
<tr>
<td style="text-align:center">F分布</td>
<td style="text-align:center">fpdf</td>
<td style="text-align:center">fcdf</td>
<td style="text-align:center">finv</td>
<td style="text-align:center">frnd</td>
</tr>
<tr>
<td style="text-align:center">t分布</td>
<td style="text-align:center">tpdf</td>
<td style="text-align:center">tcdf</td>
<td style="text-align:center">tinv</td>
<td style="text-align:center">trnd</td>
</tr>
</tbody>
</table>
</div>
<p>​                                                        .<img src="/assets/20161207224852700.png" alt="img"></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">N=<span class="number">100</span>;p=<span class="number">0.2</span>;k=<span class="number">0</span>:N;</span><br><span class="line">pk=binopdf(k,N,p);</span><br><span class="line">ck=binocdf(k,N,p);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);h=plotyy(k,pk,k,ck);</span><br><span class="line">text(<span class="number">55</span>,<span class="number">0.07</span>,<span class="string">'p=0.2'</span>);title(<span class="string">'二项分布'</span>)</span><br><span class="line"></span><br><span class="line">x=<span class="number">0</span>:<span class="number">20</span>;y1=poisspdf(x,<span class="number">2.5</span>);y2=poisspdf(x,<span class="number">5</span>);y3=poisspdf(x,<span class="number">10</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);<span class="built_in">plot</span>(x,y1,<span class="string">'r*'</span>,x,y2,<span class="string">'b-'</span>,x,y3,<span class="string">'g&lt;'</span>);</span><br><span class="line">title(<span class="string">'Poisson分布'</span>);</span><br><span class="line"></span><br><span class="line">x3=<span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>;n=normpdf(x3,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="built_in">plot</span>(x3,n);grid;</span><br><span class="line">title(<span class="string">'标准正态分布'</span>);</span><br><span class="line"></span><br><span class="line">x4=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">30</span>;</span><br><span class="line">z=chi2pdf(x4,<span class="number">1</span>);</span><br><span class="line">z1=chi2pdf(x4,<span class="number">4</span>);</span><br><span class="line">z2=chi2pdf(x4,<span class="number">10</span>);</span><br><span class="line">z3=chi2pdf(x4,<span class="number">20</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);<span class="built_in">plot</span>(x4,z,<span class="string">'r-'</span>,x4,z1,<span class="string">'-.b'</span>,x4,z2,<span class="string">':k'</span>,x4,z3,<span class="string">'--g'</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'自由度为1'</span>,<span class="string">'自由度为4'</span>,<span class="string">'自由度为10'</span>,<span class="string">'自由度为20'</span>);</span><br><span class="line">axis([<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0.2</span>]);title(<span class="string">'卡方分布'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/assets/disburition.jpg" alt="disburition"></p>
<h2 id="三、数值求导与积分"><a href="#三、数值求导与积分" class="headerlink" title="三、数值求导与积分"></a>三、数值求导与积分</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Y=diff(X)              <span class="comment">%X相邻元素间一阶差分</span></span><br><span class="line">FX=gradient(F)         <span class="comment">%向量F的一维数值梯度</span></span><br><span class="line">[FX,FY]=gradient(F)     <span class="comment">%矩阵F的二维梯度x和y部分</span></span><br><span class="line"></span><br><span class="line">q=quad(fun,,a,b)          <span class="comment">%函数fun在a到b区间数值积分----Simpson方法，，精度高</span></span><br><span class="line">q=quadl(fun,,a,b)         <span class="comment">%函数fun在a到b区间数值积分----Lobatto方法，，精度较高</span></span><br><span class="line">T=trapz(y)                <span class="comment">%计算向量或者矩阵每列的积分----梯形法，，速度快，精度差</span></span><br><span class="line">Z=cumtrapz(X,Y)           <span class="comment">%求Y对X的积分             ----梯形法</span></span><br><span class="line"></span><br><span class="line">q=dblquad(fun,xmin,xmax,ymin,ymax)        <span class="comment">%二重积分</span></span><br><span class="line">q=triplequad(fun,xmin,xmax,ymin,ymax,zmin,zmax)     <span class="comment">%三重积分</span></span><br></pre></td></tr></table></figure>
<h2 id="四、插值"><a href="#四、插值" class="headerlink" title="四、插值"></a>四、插值</h2><p>插值指在已知数据之间计算估计值的过程。<br>一维数据插值常用函数interp1，一般的语法格式为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">yi=interp1(x,y,xi,method)      <span class="comment">%xi为插值点向量或数组，method为插值方法</span></span><br><span class="line">method=<span class="string">'nearest'</span>       <span class="comment">%邻近点插值----速度最快，平滑性最差</span></span><br><span class="line">method=<span class="string">'linear'</span>        <span class="comment">%线性插值-----两个数据点连接直线（默认），运算时间长，占内存多</span></span><br><span class="line">method=<span class="string">'spline'</span>    <span class="comment">%三次样条插值----通过数据点拟合三次样条曲线，时间最长，占内存较少平滑性好</span></span><br><span class="line">method=<span class="string">'pchip'</span>or <span class="string">'cubic'</span>   <span class="comment">%分段立方Hermite插值方法</span></span><br></pre></td></tr></table></figure>
<p>二维插值主要用于图形图像处理和三维曲线拟合等领域。由函数interp2实现，一般语法为：zi=interp2(x,y,z,xi,yi,method)</p>
<p>三维插值函数interp3和n维插值函数interpn，其调用方式一般格式为：zi=interp3(x,y,z/v,xi,yi,zi,method)</p>
<p>样条插值：根据已知数据点找一组拟合多项式，拟合过程数据组每个相邻样点对用三次多项式去拟合曲线。为保证拟合的唯一性，对三次多项式在样点处一阶、二阶导数加以约束。一般格式为</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">yy=spline(x,y,xx)   <span class="comment">%根据样点数据(x,y)，求xx对应三次样条插值</span></span><br><span class="line">pp=spline(x,y)      <span class="comment">%从样点数据(x,y),求xx对应三次样条插值</span></span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">strmod=&#123;<span class="string">'nearest'</span>,<span class="string">'linear'</span>,<span class="string">'spline'</span>,<span class="string">'cubic'</span>&#125;;</span><br><span class="line">strlb=&#123;<span class="string">'(a)method=nearest'</span>,<span class="string">'(b)method=linear'</span>,<span class="string">'(c)method=spline'</span>,<span class="string">'(d)method=cubic'</span>&#125;;</span><br><span class="line">x1=<span class="number">1</span>:<span class="number">10</span>;y1=<span class="built_in">cos</span>(x1);xi1=<span class="number">0</span>:<span class="number">0.25</span>:<span class="number">10</span>;</span><br><span class="line">[x2,y2,z2]=peaks(<span class="number">6</span>);</span><br><span class="line">[xi2,yi2]=<span class="built_in">meshgrid</span>(<span class="number">-3</span>:<span class="number">0.2</span>:<span class="number">3</span>,<span class="number">-3</span>:<span class="number">0.2</span>:<span class="number">3</span>);</span><br><span class="line">[x3,y3,z3,v3]=flow(<span class="number">8</span>);</span><br><span class="line">[xi3,yi3,zi3]=<span class="built_in">meshgrid</span>(<span class="number">0.1</span>:<span class="number">0.25</span>:<span class="number">10</span>,<span class="number">-3</span>:<span class="number">0.25</span>:<span class="number">3</span>,<span class="number">-3</span>:<span class="number">0.25</span>:<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">yi1=interp1(x1,y1,xi1,strmod&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">4</span>,<span class="built_in">i</span>)</span><br><span class="line"><span class="built_in">plot</span>(x1,y1,<span class="string">'ro'</span>,xi1,yi1,<span class="string">'b'</span>),xlabel(strlb(<span class="built_in">i</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);mesh(x2,y2,z2);title(<span class="string">'原始数据'</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">6</span>:<span class="number">8</span></span><br><span class="line">zi2=interp2(x2,y2,x2,xi2,yi2,strmod&#123;<span class="built_in">j</span><span class="number">-5</span>&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">4</span>,<span class="built_in">j</span>);mesh(xi2,yi2,zi2);title(strlb&#123;<span class="built_in">j</span><span class="number">-5</span>&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>);slice(x3,y3,z3,v3,[<span class="number">3</span>,<span class="number">5</span>],<span class="number">2</span>,[<span class="number">-2</span>,<span class="number">3</span>]);title(<span class="string">'插值前'</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">10</span>:<span class="number">12</span></span><br><span class="line">vi3=interp3(x3,y3,z3,v3,xi3,yi3,zi3,strmod&#123;k<span class="number">-8</span>&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">4</span>,k);slice(xi3,yi3,zi3,vi3,[<span class="number">3</span>,<span class="number">5</span>],<span class="number">2</span>,[<span class="number">-2</span>,<span class="number">3</span>]);xlabel(strlb&#123;k<span class="number">-8</span>&#125;);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><img src="/assets/9-1578887741457.jpg" alt="9"></p>
<h2 id="五、曲线拟合"><a href="#五、曲线拟合" class="headerlink" title="五、曲线拟合"></a>五、曲线拟合</h2><p>​       曲线拟合用于求与一组数据最吻合的函数，用polyfit函数实现，该函数采用最小二乘法计算，使拟合函数多项式在各数据点处偏差的平方之和达最小。调用格式如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p=polyfit(x,y,n)         <span class="comment">% P(1)*X^N + P(2)*X^(N-1) +...+ P(N)*X + P(N+1)即为该函数</span></span><br><span class="line">[p,s]=polyfit(x,y,n)     <span class="comment">% s为拟合多项式有关误差估计的结构数组</span></span><br><span class="line">p=polyfit(x,<span class="built_in">log10</span>(y),<span class="number">1</span>)  <span class="comment">% y=b(10)^mx指数函数拟合，w=log10y,z=x--w=p1z+p2</span></span><br></pre></td></tr></table></figure>
<h2 id="六、Fourier分析"><a href="#六、Fourier分析" class="headerlink" title="六、Fourier分析"></a>六、Fourier分析</h2><p>对于离散数据，频谱分析的计算基础是离散傅里叶变换（DFT),调用如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Y=fft(X)        <span class="comment">%对数据X作一维快速离散傅里叶变换  ifft--傅里叶反变换</span></span><br><span class="line">Y=fft2(X)       <span class="comment">%二位快速傅里叶变换,相对于fft(fft(X)')'  --- ifft2</span></span><br><span class="line">Y=fftshift(X)   <span class="comment">%把变换结果Y（频域数据）中的直流分量（频率为0处值）移到中间位置---ifftshift</span></span><br></pre></td></tr></table></figure>
<h2 id="七、微分方程"><a href="#七、微分方程" class="headerlink" title="七、微分方程"></a>七、微分方程</h2><h3 id="1、常微分方程"><a href="#1、常微分方程" class="headerlink" title="1、常微分方程"></a>1、常微分方程</h3><p>​      对广泛的、非线性性的一般常微分方程，通常不存在初等函数解析解。由于实际问题求解的需要，求近似的数值解成为解决问题的重要手段。常见求数值解的方法有欧拉折线法，阿当姆斯法，龙格—库塔法与吉尔法等。数值解不受方程类型限制，即可求任何形式常微分方程特解。龙格—库塔法精度较高，计算量适中，所以使用较广泛。调用语法如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[t,y]=ode23(filename,tspan,y0)      <span class="comment">%二阶、三阶龙格——库塔法计算</span></span><br><span class="line">[t,y]=ode45(filename,tspan,y0)      <span class="comment">%四阶、五阶龙格——库塔法计算</span></span><br><span class="line"><span class="comment">%filename是定义f(t,y)的函数文件名，Tspan的形式为[t0,f0],表示求解区间，y0是初始状态列向量</span></span><br></pre></td></tr></table></figure>
<h3 id="2、偏微分方程"><a href="#2、偏微分方程" class="headerlink" title="2、偏微分方程"></a>2、偏微分方程</h3><p>MATLAB提供一个专门用于求解偏微分方程（PDE）的工具箱PDE Toolbox。本节介绍一些简单、经典的偏微分方程并给出求解方法：</p>
<p>椭圆形问题：assempde()函数</p>
<p>抛物型问题：parabolic()函数</p>
<p>双曲型问题：hyperbolic()函数</p>
]]></content>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB的GUI设计</title>
    <url>/2019/12/29/MATLAB%E7%9A%84GUI%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>title: MATLAB的GUI设计<br>date: 2019-12-29 18:34:02<br>tags: GUI设计</p>
<h1 id="MATLAB的GUI程序设计"><a href="#MATLAB的GUI程序设计" class="headerlink" title="MATLAB的GUI程序设计"></a>MATLAB的GUI程序设计</h1><p>图形用户界面(Graphical User Intervaces)是包含图像对象和文本的用户界面，介绍GUI的基本元素。</p>
<a id="more"></a>
<h2 id="1-基本知识"><a href="#1-基本知识" class="headerlink" title="1. 基本知识"></a>1. 基本知识</h2><h3 id="1-1-三个基本元素"><a href="#1-1-三个基本元素" class="headerlink" title="1.1. 三个基本元素"></a>1.1. 三个基本元素</h3><p>​       1.组件： 在 MATLAB GUI 中的每一个项目(按钮，标签，编辑框等)都是一个图形化组件组件。可分为三类： 图形化控件(按钮，编辑框，列表，滑动条等)， 静态元素(窗口和文本字符串)， 菜单和坐标系。图形化控件和静态元素由函数 uicontrol 创建，菜单由函数 uimenu和 uicontextmenu 创建，坐标系经常用于显示图形化数据，由函数 axes 创建。<br>​        2.图象窗口： GUI 的每一个组件都必须安排图象窗口中。以前，我们在画数据图象时，图象窗口会被自动创建。但我们还可以用函数 figure 来创建空图象窗口，空图象窗口经常用于放置各种类型的组件。<br>​        3.响应： 最后，如果用户用鼠标单击或用键盘键入一些信息，那么程序就要有相应的动作。鼠标单击或键入信息是一个事件，如果MATLAB程序运行相应的函数，那么MATLAB函数肯定会有所反应。例如，如果用户单击一按钮，这个事件必然导致相应的 MATLAB 语执行。这些相应的语句被称为响应。只要执行 GUI 的单个图形组件，必须有一个响应。</p>
<h3 id="1-2-启动GUI开发环境"><a href="#1-2-启动GUI开发环境" class="headerlink" title="1.2. 启动GUI开发环境"></a>1.2. 启动GUI开发环境</h3><p>1）启动操作界面—-输入 “guide”</p>
<p>2） 新建GUI对话框—提供四个功能板块</p>
<p>~~Blank GUI(Default):空白的GUI，不含任何控件</p>
<p>~~GUI with Uicontrols:带用户控件（Uicontrols）的用户界面</p>
<p>~~GUI with Axes and Menu:带坐标轴和菜单的控件</p>
<p>~~Modal Qusetion Dialog:带询问对话框的用户界面</p>
<p>3）得到如图所示界面：Layout编辑器</p>
<p><img src="/assets/4.PNG" alt="4"></p>
<p>4）运行GUI—绿色按钮<img src="/assets/image-20191229204859741.png" alt="image-20191229204859741">或快捷键Ctrl+T</p>
<h3 id="1-3-句柄命令"><a href="#1-3-句柄命令" class="headerlink" title="1.3 句柄命令"></a>1.3 句柄命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>功能描述</th>
<th>函数名</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>gca</td>
<td>获得当前坐标轴对象的句柄</td>
<td>copyobj</td>
<td>复制对象</td>
</tr>
<tr>
<td>gcbf</td>
<td>获得当前正在执行调用的图形对象的句柄</td>
<td>delete</td>
<td>删除对象</td>
</tr>
<tr>
<td>gcbo</td>
<td>获得当前正在执行调用的对象句柄</td>
<td>findall</td>
<td>查找所有对象（包括隐藏句柄）</td>
</tr>
<tr>
<td>gcf</td>
<td>获得当前图形对象的句柄</td>
<td>findobj</td>
<td>查找指定句柄</td>
</tr>
<tr>
<td>gco</td>
<td>获得当前对象的句柄</td>
<td>get</td>
<td>查询对象属性值</td>
</tr>
<tr>
<td>allchild</td>
<td>获得所有子代</td>
<td>ishandle</td>
<td>判断是否为句柄</td>
</tr>
<tr>
<td>ancestor</td>
<td>获得父图形对象</td>
<td>set</td>
<td>设置对象属性值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="1-4-菜单属性"><a href="#1-4-菜单属性" class="headerlink" title="1.4 菜单属性"></a>1.4 菜单属性</h3><p>创建菜单对象时可使用 uimenu 函数定义属性， set 函数改变属性。下表是MATLAB中菜单属性及属性值，带*的属性是非文件式的，使用需加小心。括号{}内属性值为默认值。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Accelerator</th>
<th>指定菜单项等价的按键或快捷键，按键顺序：Control—字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>BackgroundColor</td>
<td>uimenu背景色，是一个3元素的RGB向量或MATLAB预先定义的颜色名称。默认的背景色是亮灰色</td>
</tr>
<tr>
<td>Callback</td>
<td>MATLAB回调字符串。选择菜单项时，回调串传给函数eval，初始值为空矩阵</td>
</tr>
<tr>
<td>Checked</td>
<td>被选项的校验标记 —- on:校验标记出现在所选项的旁边      {off}:校验标记不显示</td>
</tr>
<tr>
<td>Enable</td>
<td>菜单使能状态—-{on}:菜单项使能,选择菜单项能将 Callback字符串传给eval；菜单项不使能，菜单标志变灰，选择菜单项            off:不起任何作用</td>
</tr>
<tr>
<td>ForegroundColor</td>
<td>uimenu前景（文本）色，是一个三元素的RGB向量或 MATLAB预先定义的颜色名称。默认的前景色是黑色</td>
</tr>
<tr>
<td>Label</td>
<td>含有菜单项标志的文本串。在PC系统中，标记中前面有＆，定义了快捷键，它由Alt - 字符激活</td>
</tr>
<tr>
<td>Position</td>
<td>Uimenu对象的相对位置。顶层菜单从左到右编号，子菜单从上至下编号</td>
</tr>
<tr>
<td>Separator</td>
<td>分割符一线模式—-on:分割线在菜单项之上              {off}:不画分割线</td>
</tr>
<tr>
<td>*Visible</td>
<td>uimenu对象的可视性—-{on}: uimenu对象在屏幕上可见            off: uimenu对象不可见</td>
</tr>
<tr>
<td>ButtonDownFar</td>
<td>当对象被选择时， MATLAB的回调传给函数eval。初始值为空矩阵</td>
</tr>
<tr>
<td>Clipping</td>
<td>其他 uimenu对象的句柄</td>
</tr>
<tr>
<td>Interrruptible</td>
<td>指明ButtonDownFcn和CallBack串是否可中断—-{on}:不可中断      off:可中断</td>
</tr>
<tr>
<td>Parent</td>
<td>父对象的句柄。若uimenue对象是顶层菜单，则为图形对象；若是子菜单，则为父的uimenu对象句柄</td>
</tr>
<tr>
<td>*Select</td>
<td>值为[on丨off]</td>
</tr>
<tr>
<td>*Tag</td>
<td>用户用于标识对象的文本串</td>
</tr>
<tr>
<td>Type</td>
<td>只读对象辨识符，通常为uimenu</td>
</tr>
<tr>
<td>UserDate</td>
<td>用户指定的数据，矩阵、字符串等</td>
</tr>
<tr>
<td>Visiable</td>
<td>控制对象在屏幕上是否可见—-{on} ， off</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-控件"><a href="#2-控件" class="headerlink" title="2. 控件"></a>2. 控件</h2><h3 id="2-1-可选控件"><a href="#2-1-可选控件" class="headerlink" title="2.1 可选控件"></a>2.1 可选控件</h3><p>1）复选框(Check Box)：单个复选框用于在两种状态间切换，多可复选框组成的单选框组，在一组状态中做组合式选择。未选中，Value属性值为0，选中时为1；Style属性值为checkbox</p>
<p>2）可编辑文本框(Editable text)：输入、修改文本，单行或多行模式。Style属性值为edit</p>
<p>3）列表框(Lists boxes)：定义可供选择的字符串。Sytle属性值为listbax</p>
<p>4）下拉列表(Pop-up menus)：显示属性值。Sytle属性值是popupmenu</p>
<p>5）命令按钮(Push buttons)：执行预定功能或操作。Sytle属性值为pushbutton</p>
<p>6）单选按钮(Radio buttons)：与复选框相似，进行功能互斥的选择。Sytle属性值为radiobutton</p>
<p>7）滚动条(Sliders)：可输入指定范围的数量值。Sytle属性值为slideers</p>
<p>8）静态文本框(Static text)：显示别的控件有关信息，不可改变内容。Sytle属性是text</p>
<p>9）开关按钮(Toggle Button)：与命令按钮类似，不会弹起。</p>
<p>10）坐标轴(Axes)：显示图形和图像。</p>
<h3 id="2-2-控件属性"><a href="#2-2-控件属性" class="headerlink" title="2.2 控件属性"></a>2.2 控件属性</h3><p>可在布局窗口双击控件查看或修改属性，常规属性如下(MATLAB入门到精通P243)</p>
<p>1）：控件风格和外观属性：BackgroundColor     CData      ForefroundColor    String    Properties</p>
<p>2）：对象常规信息属性：Enable  Sytle  Tag  TooltipString  UserData   Position   Units   FontAngle   FontName</p>
<p>3）：控件当前状态属性：ListboxTop    Max    Min     Value</p>
<p>4）：控件回调函数的执行属性：BusyAction    ButtonDownFcn  CallBack  CeateBack  DeleteFcn   Interruptible</p>
<h2 id="3-Callback函数"><a href="#3-Callback函数" class="headerlink" title="3. Callback函数"></a>3. Callback函数</h2><p>令菜单具有实际操作功能，生成M文件中子函数。</p>
<h3 id="3-1-变量传递"><a href="#3-1-变量传递" class="headerlink" title="3.1 变量传递"></a>3.1 变量传递</h3><p>Handles~包含所有对象的句柄结构数组，可</p>
<ol>
<li><p>访问GUI数据</p>
</li>
<li><p>实现回调函数变量传递<br>handles.current_data=X;   %将句柄结构的一个域设为X<br>guidata(hobject,hanles)    %guidata函数保存该句柄结构<br>X=handles.current_data;   %其他回调函数中重新得到该变量值</p>
</li>
</ol>
<h3 id="3-2-函数编写"><a href="#3-2-函数编写" class="headerlink" title="3.2 函数编写"></a>3.2 函数编写</h3><h4 id="1-响应函数类型"><a href="#1-响应函数类型" class="headerlink" title="1~响应函数类型"></a>1~响应函数类型</h4><ol>
<li>Opening function（打开函数）：访问GUI之前实现某些操作</li>
<li>Output function（输出函数）：将某个变量传递给另一个GUI。Varargout包含输出参数(默认一 个)的元胞数组     组，添加命令：varargout{2}=handles.second_output;创建另外的输出参数</li>
<li>Callbacks（回调函数）：回调命令由所选控件的标签属性决定</li>
<li>hObject图像或者是回凋对象的句柄</li>
<li>handles具有句柄或是用户数据的结构</li>
</ol>
<p>命令：guidata(hObject,handles)——在函数最后阶段进行更新数据的保存</p>
<h4 id="2-响应函数语法、参数与关联"><a href="#2-响应函数语法、参数与关联" class="headerlink" title="2~响应函数语法、参数与关联"></a>2~响应函数语法、参数与关联</h4><p>1）名称：控件标签(Tag属性)+下划线+函数属性</p>
<p>2）关联：指定每个控件对应的响应函数，用户通过属性编辑器将其他响应属性设置为%automatic。</p>
<h2 id="4-创建GUI"><a href="#4-创建GUI" class="headerlink" title="4. 创建GUI"></a>4. 创建GUI</h2><p>1）：guide命令打开GUI图形用户界面设计向导—-建立需要类型文件</p>
<p>2）：添加组件，&lt;复制&gt;，&lt;工具&gt;—-&lt;对其对象&gt;，合适调整</p>
<p>3）：设置控件属性</p>
<p>​          文本框—-<string.>设置文字 ;    <HorizontalAlignment.>设置文字左右对齐      <FontSize.>设置字体大小</FontSize.></HorizontalAlignment.></string.></p>
<p>4）：保存用户图形界面</p>
<p>5）：编写程序代码</p>
<p>6）：为图形用户界面添加标题——-添加&lt;静态文本&gt;</p>
<p>7）：运行图形用户界面</p>
<p>附：添加背景图片  &lt;检查器&gt;—-<CreateFcn.> —-添加代码</CreateFcn.></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ha=axes(<span class="string">'units'</span>,<span class="string">'normalized'</span>,<span class="string">'pos'</span>,[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>]);</span><br><span class="line">uistack(ha,<span class="string">'down'</span>);</span><br><span class="line">ii=imread(<span class="string">'background.png'</span>);        <span class="comment">%照片background.png为背景</span></span><br><span class="line">image(ii);</span><br><span class="line">colormap gray</span><br><span class="line">set(ha,<span class="string">'handlevisibility'</span>,<span class="string">'off'</span>,<span class="string">'visible'</span>,<span class="string">'on'</span>);</span><br></pre></td></tr></table></figure>
<p>改变按钮背景—-代码</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">I=imread(<span class="string">'buttoncdata.bmp'</span>);</span><br><span class="line">set(handles.pushbutton1,<span class="string">'cdata'</span>,I);</span><br></pre></td></tr></table></figure>
<h2 id="5-实例解析"><a href="#5-实例解析" class="headerlink" title="5.实例解析"></a>5.实例解析</h2><p>1.简单声音播放器</p>
<p>播放&lt;按钮&gt;CellBack函数内容:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[y,f,b]=wavread(<span class="string">'loff'</span>)     <span class="comment">%读入声音文件loff.wav</span></span><br><span class="line">sound(y,f,d)                <span class="comment">%由声卡播放声音</span></span><br></pre></td></tr></table></figure>
<p>&lt;关闭&gt;按钮callback函数内容：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">close(gcbf)</span><br></pre></td></tr></table></figure>
<p>2.滑条界面</p>
<p>移动滑块对应数值显示在框中，输入指定范围数字滑块移动到对应位置</p>
<p>&lt;滑块&gt;cellback函数内容：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">val=get(handles.slider1,<span class="string">'value'</span>);</span><br><span class="line">set(handles.edit1,<span class="string">'string'</span>,num2str(val))</span><br></pre></td></tr></table></figure>
<p>&lt;文本框&gt;cellback函数内容：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">str=get(handles.edit1,<span class="string">'string'</span>);</span><br><span class="line">set(handles.slider1,<span class="string">'value'</span>,str2num(str))</span><br></pre></td></tr></table></figure>
<p>3.建立多个子菜单</p>
<p>根据&lt;标记&gt;点击&lt;查看&gt;可得到m文件中对应位置，然后添加对应代码</p>
<p><img src="/assets/6.PNG" alt="7"><img src="/assets/7.PNG" alt="6"></p>
]]></content>
  </entry>
  <entry>
    <title>MATLAB符号计算</title>
    <url>/2020/02/06/MATLAB%E7%AC%A6%E5%8F%B7%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="符号计算"><a href="#符号计算" class="headerlink" title="符号计算"></a>符号计算</h1><h2 id="一、符号变量、表达式及符号方程"><a href="#一、符号变量、表达式及符号方程" class="headerlink" title="一、符号变量、表达式及符号方程"></a>一、符号变量、表达式及符号方程</h2><p>进行符号运算前，先定义符号对象，然后利用符号对象构建表达式，最后进行符号计算。</p>
<h3 id="1、创建符号变量与表达式"><a href="#1、创建符号变量与表达式" class="headerlink" title="1、创建符号变量与表达式"></a>1、创建符号变量与表达式</h3><p>1、sym函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">S = sym(A)   <span class="comment">% 把数字、字符串或表达式A转换为符号对象S</span></span><br><span class="line">x = sym(<span class="string">'x'</span>)  <span class="comment">%以x为名创建符号变量，结果储存到x</span></span><br><span class="line">x = sym(<span class="string">'x'</span>,<span class="string">'real'</span>)  <span class="comment">%限定x表示实型符号变量</span></span><br><span class="line">k = sym(<span class="string">'k'</span>,<span class="string">'positive'</span>)   <span class="comment">%限定x表示正的实型符号变量</span></span><br><span class="line">x = sym(<span class="string">'x'</span>,<span class="string">'clear'</span>)   <span class="comment">%无附件条件设x为纯形式变量</span></span><br><span class="line">S = sym(A,flag)   <span class="comment">%将数值标量或者矩阵转换为符号形式，参数flag是定义转换符号对象应符合的格式</span></span><br></pre></td></tr></table></figure>
<p>【例1-1】sym函数定义符号表达式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=sym(<span class="string">'a'</span>),b=sym(<span class="string">'b'</span>),c=sym(<span class="string">'c'</span>),d=sym(<span class="string">'d'</span>),x=sym(<span class="string">'x'</span>);</span><br><span class="line">f=a*x^<span class="number">2</span>+b*x+c,g=sym(<span class="string">'a*x^2+b*x+c'</span>)</span><br></pre></td></tr></table></figure>
<p>2、syms函数      可同时将多个变量创建为符号对象</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms arg1 arg2...      <span class="comment">%等同于arg1=sym('arg1');arg2=sym('arg2');...</span></span><br><span class="line">syms arg1 arg2...<span class="built_in">real</span>   <span class="comment">%等同于arg1=sym('srg1','real');arg2=sym('arg2','real');...</span></span><br></pre></td></tr></table></figure>
<h3 id="2-运算符和基本函数"><a href="#2-运算符和基本函数" class="headerlink" title="2.运算符和基本函数"></a>2.运算符和基本函数</h3><p>基础运算符：+、-、*、/、^、等</p>
<p>关系运算符：’==’ ‘~=’  表示等于、不等于</p>
<p>三角、双曲函数：除了atan2函数只用于数值计算，其余都可用于符号计算</p>
<p>指数、对数函数：指数函数均可用，对数只能用 log函数，不能用 log2 和 log10</p>
<p>复数函数与矩阵代数：符号计算与数值计算基本相同</p>
<h2 id="二、符号微积分"><a href="#二、符号微积分" class="headerlink" title="二、符号微积分"></a>二、符号微积分</h2><h3 id="1、符号求导与微分"><a href="#1、符号求导与微分" class="headerlink" title="1、符号求导与微分"></a>1、符号求导与微分</h3><p>已知diff函数可实现函数求导与求微分，实现一元函数求导和多元函数求偏导。当输入参数为符号表达式时，diff函数还可用于实现符号微分，调用语法如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">diff(S)    <span class="comment">%实现表达式S的求导，自变量可通过函数 symvar查看</span></span><br><span class="line">diff(S,<span class="string">'v'</span>)   <span class="comment">%表达式对指定变量v的求导   还可写为 diff(S,sym('v'))</span></span><br><span class="line">diff(S,n)     <span class="comment">%S的n阶导</span></span><br><span class="line">diff(S,<span class="string">'v'</span>,n)   <span class="comment">%S对v的n阶导</span></span><br></pre></td></tr></table></figure>
<p>【例2-1】符号矩阵求导</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms a x</span><br><span class="line">A = [<span class="built_in">cos</span>(a*x),<span class="built_in">sin</span>(a*x);-<span class="built_in">sin</span>(a*x),<span class="built_in">cos</span>(a*x)]</span><br><span class="line">diff(A)=</span><br><span class="line">[ -a*<span class="built_in">sin</span>(a*x), a*<span class="built_in">cos</span>(a*x)]</span><br><span class="line">[ -a*<span class="built_in">cos</span>(a*x), -a*<span class="built_in">sin</span>(a*x)]</span><br></pre></td></tr></table></figure>
<h3 id="2、符号求极限"><a href="#2、符号求极限" class="headerlink" title="2、符号求极限"></a>2、符号求极限</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">limit(F,x,a)     <span class="comment">% x趋近于a时表达式F的极限</span></span><br><span class="line">limit(F,a)      <span class="comment">% F中自变量趋近于a时F的极限</span></span><br><span class="line">limit(F)       <span class="comment">% F中自变量趋近于0时F的极限</span></span><br><span class="line">limit(F,x,a,<span class="string">'right'</span>)    <span class="comment">% x从右侧趋近于a时F极限</span></span><br><span class="line">limit(F,x,a,<span class="string">'left'</span>)      <span class="comment">% 左侧</span></span><br></pre></td></tr></table></figure>
<h3 id="3、符号积分"><a href="#3、符号积分" class="headerlink" title="3、符号积分"></a>3、符号积分</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">int（S）          <span class="comment">%求表达式s的不定积分，自变量由 symvar函数查看。</span></span><br><span class="line">int（S，v）       <span class="comment">%求表达式S对自变量v的不定积分。</span></span><br><span class="line">int（S，a，b）     <span class="comment">%求表达式s在区间［a，b］上的定积分，自变量由 symvar函数查看。</span></span><br><span class="line">int（s，v，a，b）   <span class="comment">%求表达式在区间［a，b］上的定积分，自变量为v</span></span><br></pre></td></tr></table></figure>
<p>【例3-1】</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x z ；</span><br><span class="line">A＝［<span class="built_in">exp</span>（x）,<span class="built_in">exp</span>（z*x）, <span class="built_in">sin</span> （z）， <span class="built_in">cos</span> （z）］创建符号矩阵表达式</span><br><span class="line">A = </span><br><span class="line">[ <span class="built_in">exp</span>（x）， <span class="built_in">exp</span>（x*z）］</span><br><span class="line">[<span class="built_in">sin</span>（ z），  <span class="built_in">cos</span> （z）］</span><br></pre></td></tr></table></figure>
<h3 id="4、级数求和"><a href="#4、级数求和" class="headerlink" title="4、级数求和"></a>4、级数求和</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">symsum(s)     <span class="comment">%计算s从0到k-1的和</span></span><br><span class="line">symsum(s,v)    <span class="comment">%计算表达式s从0到v-1的和</span></span><br><span class="line">symsum(s,a,b)    <span class="comment">%计算自变量从a到b之间s的和</span></span><br><span class="line">symsum(s,v,a,b)    <span class="comment">%计算v从a到b之间的s的和</span></span><br></pre></td></tr></table></figure>
<p>【例4-1】级数求和</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms k n x</span><br><span class="line">symsum(<span class="number">1</span>/<span class="number">2</span>^k,<span class="number">1</span>,<span class="built_in">inf</span>)    <span class="comment">%求表达式1/2^k从1到无穷的和</span></span><br><span class="line">s2 = symsum(x^k,k,<span class="number">0</span>,<span class="built_in">inf</span>)    <span class="comment">%级数求和可以得出分段函数表达式</span></span><br><span class="line">s2 = piecewise([<span class="number">1</span> &lt;= x,Inf][<span class="built_in">abs</span>(x)&lt;<span class="number">1</span>,<span class="number">-1</span>/(x<span class="number">-1</span>)])</span><br></pre></td></tr></table></figure>
<h3 id="5、Taylor级数"><a href="#5、Taylor级数" class="headerlink" title="5、Taylor级数"></a>5、Taylor级数</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">taylor(f)     <span class="comment">%返回f的5阶麦克劳林近似多项式</span></span><br><span class="line">taylor(f,n,v)   <span class="comment">%计算f的关于符号变量v的n-1阶麦克劳林近似多项式</span></span><br><span class="line">taylor(f,n,v,a)    <span class="comment">%根据指定变量v，阶数n，计算f在a的级数，a可以是数值、符号或字符串</span></span><br></pre></td></tr></table></figure>
<h2 id="三、符号表达式的化简与替换"><a href="#三、符号表达式的化简与替换" class="headerlink" title="三、符号表达式的化简与替换"></a>三、符号表达式的化简与替换</h2><h3 id="1、合并符号表达式同类项"><a href="#1、合并符号表达式同类项" class="headerlink" title="1、合并符号表达式同类项"></a>1、合并符号表达式同类项</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R= collect(S)    <span class="comment">%按默认变量x的次数合并系数</span></span><br><span class="line">R= collect(S,v)   <span class="comment">%按指定变量v进行合并符号表达式同类项运算</span></span><br><span class="line"></span><br><span class="line">expand(S)         <span class="comment">%对符号表达式进行展开</span></span><br><span class="line"></span><br><span class="line">horner(f)          <span class="comment">%对符号表达式f进行horner分解，分解为嵌套形式的多项式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">factor</span>(f)         <span class="comment">%因式分解，n为正整数，返回值为n的质数分解式；n为多项式或整数矩阵，分解矩阵每一                          个1元素。若整数矩阵中一个元素位数超过16位，必须首先使用函数sym创建该元素</span></span><br><span class="line"></span><br><span class="line">simplify(S)       <span class="comment">%使用MuPAD化简规则对符号表达式矩阵每个元素化简</span></span><br><span class="line">simplify(S,n)      <span class="comment">%使用正整数n控制简化过程中尝试次数，默认为50</span></span><br><span class="line"></span><br><span class="line">r=simple(S)      <span class="comment">%以长度最短为目标对符号表达式简化</span></span><br><span class="line">[r,how]=simple(S)   <span class="comment">%r为简化后形式，how为简化方法</span></span><br><span class="line"></span><br><span class="line">pretty(B)     <span class="comment">%用习惯的书写方式显示符号表达式</span></span><br></pre></td></tr></table></figure>
<h3 id="2、符号表达式的替换"><a href="#2、符号表达式的替换" class="headerlink" title="2、符号表达式的替换"></a>2、符号表达式的替换</h3><p>符号结果显冗长，子表达式出现多处可用新变量替换。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[Y,SIGMA]=subexpr(X,SIGMA)      <span class="comment">%指定变量SIGMA的值替代符号表达式中重复出现字符串，Y为替换结果</span></span><br><span class="line">[Y,SIGMA]=subexpr(X,<span class="string">'SIGMA'</span>)    <span class="comment">%第二输入为字符或者字符串</span></span><br><span class="line"></span><br><span class="line">R=subs(S)         <span class="comment">%用工作空间中变量替换S中所有符号变量</span></span><br><span class="line">R=subs(S,new)      <span class="comment">%用新符号变量new替换S中默认变量</span></span><br><span class="line">R=subs(S,old,new)   <span class="comment">%用new替换old</span></span><br></pre></td></tr></table></figure>
<p>【例2-1】替换</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">subs(<span class="built_in">cos</span>(a)+<span class="built_in">sin</span>(b),&#123;a,b&#125;,&#123;sym(<span class="string">'alpha'</span>),<span class="number">2</span>&#125;)</span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">sin</span>(<span class="number">2</span>) + <span class="built_in">cos</span>(alpha)             <span class="comment">%多变量替换</span></span><br></pre></td></tr></table></figure>
<h2 id="四、符号可变精度计算"><a href="#四、符号可变精度计算" class="headerlink" title="四、符号可变精度计算"></a>四、符号可变精度计算</h2><p>数值计算受计算机字长限制，每次数值操作可能有截断误差，因此任何一次数值计算无论什么算法都可能产生累积误差。MATLAB的符号计算工具提供3个不同类型计算精度：</p>
<p>数值类型：MATLAB浮点数计算</p>
<p>有理数类型：MuPAD软件中精确符号计算</p>
<p>VPA类型：MuPAD软件中任意精度计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">digits(D)   %设置数值精度位数D</span><br><span class="line">D&#x3D;digits     %返回当前数值精度</span><br><span class="line">R&#x3D;vpa(s)      %显示符号表达式s在当前精度下的值</span><br><span class="line">vpa(s,D)     %显示符号表达式s在精度D下的值</span><br></pre></td></tr></table></figure>
<h2 id="五、符号线性代数"><a href="#五、符号线性代数" class="headerlink" title="五、符号线性代数"></a>五、符号线性代数</h2><h3 id="1、基础代数运算"><a href="#1、基础代数运算" class="headerlink" title="1、基础代数运算"></a>1、基础代数运算</h3><h2 id="六、符号方程求解"><a href="#六、符号方程求解" class="headerlink" title="六、符号方程求解"></a>六、符号方程求解</h2><h3 id="1、求代数方程符号解"><a href="#1、求代数方程符号解" class="headerlink" title="1、求代数方程符号解"></a>1、求代数方程符号解</h3><p>代数方程包括线性，非线性和超越方程等，求解函数为solve。方程不存在符号解时，solve给出数值解。调用语法为：solve(S)——-求解S=0时符号变量的值。求解指定符号变量b可用：b = solve(S,b)</p>
<p><code>s=solve(&#39;cos(2*x)+sin(x)=1&#39;)</code>求解f(x)=q(x)的方程</p>
<h3 id="2、求代数方程组的符号解"><a href="#2、求代数方程组的符号解" class="headerlink" title="2、求代数方程组的符号解"></a>2、求代数方程组的符号解</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x y alpha         <span class="comment">%创建必须的符号对象</span></span><br><span class="line">[x,y] = solve(x^<span class="number">2</span>*y^<span class="number">2</span>, x-y/<span class="number">2</span>-alpha)      <span class="comment">%解方程组</span></span><br><span class="line">esql = <span class="string">'x^2*y^2=1, x-y/2-alpha'</span>;   <span class="comment">%创建方程组</span></span><br><span class="line">[x,y] = solve(esql)</span><br><span class="line">S = solve(<span class="string">'u^2-v^2 = a^2'</span>,<span class="string">'u + v = 1'</span>,<span class="string">'a^2-2*a=3'</span>)</span><br><span class="line">S =                 <span class="comment">%返回一个结果的架构数组</span></span><br><span class="line">  包含以下字段的 struct:        <span class="comment">% S.a查看相应结果</span></span><br><span class="line">    a: [<span class="number">2</span>×<span class="number">1</span> sym]</span><br><span class="line">    u: [<span class="number">2</span>×<span class="number">1</span> sym]</span><br><span class="line">    v: [<span class="number">2</span>×<span class="number">1</span> sym]</span><br></pre></td></tr></table></figure>
<h3 id="3、求微分方程符号解"><a href="#3、求微分方程符号解" class="headerlink" title="3、求微分方程符号解"></a>3、求微分方程符号解</h3><p>函数dsolve可计算常微分方程的符号解。常微分方程由包含表达微分的字母D的符号表达式表示。符号D2,D3……DN分别对应第2，第3……第N阶导数。D2y等同于表达式d²y/dt²，默认自变量为t。</p>
<p>符号变量的名字不能包含字母D</p>
<p>初始条件由附加方程指定，若没有指定初始条件，结果将包括积分常数项C1、C2等</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">r = dsolve(<span class="string">'eq1,eq2,...'</span>,<span class="string">'cond1,cond2...'</span>,<span class="string">'v'</span>)  <span class="comment">%eq...指定常微分方程，v代表自变量，cond...设置初始条件</span></span><br><span class="line">r = dsolve(<span class="string">'eq1'</span>,<span class="string">'eq2'</span>,...,<span class="string">'cond1'</span>,<span class="string">'cond2'</span>...,<span class="string">'v'</span>)</span><br><span class="line">dsolve(<span class="string">'eq1,eq2,...'</span>,<span class="string">'cond1,cond2...'</span>,<span class="string">'v'</span>)</span><br></pre></td></tr></table></figure>
<p>微分方程组类似方程组求解</p>
<h2 id="七、符号积分变换"><a href="#七、符号积分变换" class="headerlink" title="七、符号积分变换"></a>七、符号积分变换</h2><h3 id="1、Fourier变换及其反变换"><a href="#1、Fourier变换及其反变换" class="headerlink" title="1、Fourier变换及其反变换"></a>1、Fourier变换及其反变换</h3><p>函数 f(x) 的傅里叶变换的定义式为：</p>
<script type="math/tex; mode=display">
F[f](w)=\int_{-\infty}^{\infty}{f(x)e^{-iwx}}dx</script><p>傅里叶反变换的定义式为：</p>
<script type="math/tex; mode=display">
F^{-1}[f](x)=\frac{1}{2π}\int_{-\infty}^{\infty}{f(x)e^{iwx}}du</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">F = fourier(f,u,v)       <span class="comment">%时域函数f的傅里叶变换F，f以u为自变量的时域函数，F以频率v为自变量的频域函数</span></span><br><span class="line">f = ifourier(F,u,v)      <span class="comment">%傅里叶反函数</span></span><br></pre></td></tr></table></figure>
<p>【例1-1】傅里叶变换</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x</span><br><span class="line">f = <span class="built_in">exp</span>(-x^<span class="number">2</span>);</span><br><span class="line">fourier(f) = <span class="built_in">pi</span>^(<span class="number">1</span>/<span class="number">2</span>)/<span class="built_in">exp</span>(w^<span class="number">2</span>/<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2、Laplace变换及其反变换"><a href="#2、Laplace变换及其反变换" class="headerlink" title="2、Laplace变换及其反变换"></a>2、Laplace变换及其反变换</h3><p>Laplace变换的定义式为</p>
<script type="math/tex; mode=display">
L[f](s)=\int_{0}^{\infty}{f(t)e^{-ts}}dt</script><p>Laplace反变换的定义式为</p>
<script type="math/tex; mode=display">
L^{-1}[f](x)=\frac{1}{2πi}\int_{c-i\infty}^{c+i\infty}{f(s)e^{st}}ds</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">L = laplace(F,w,z)        <span class="comment">%时域函数F的拉普拉斯变换L，F以w为自变量的时域函数，L以频率z为自变量的频域函数</span></span><br><span class="line">F = ilaplace(L,y,x)       <span class="comment">%拉普拉斯反函数</span></span><br></pre></td></tr></table></figure>
<h3 id="3、Z变换"><a href="#3、Z变换" class="headerlink" title="3、Z变换"></a>3、Z变换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F &#x3D; ztrans(f,k,w)       %时域函数f的ztrans变换F，f以k为自变量的时域函数，F以频率w为自变量的频域函数</span><br><span class="line">f &#x3D; iztrans(F,w,k)       %Z反变换</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>宇宙学</title>
    <url>/2021/01/06/%E5%AE%87%E5%AE%99%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="宇宙学"><a href="#宇宙学" class="headerlink" title="宇宙学"></a>宇宙学</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td>CMD</td>
<td>cold dark matter</td>
<td style="text-align:center">冷暗物质</td>
</tr>
<tr>
<td>FRW</td>
<td>Friedmann-Robertson-Walker</td>
<td style="text-align:center">均匀各向同性大爆炸模型</td>
</tr>
<tr>
<td>WIMPs</td>
<td>Weakly interacting massive particles</td>
<td style="text-align:center">大质量弱相互作用粒子</td>
</tr>
<tr>
<td>SUSY</td>
<td>supersymmetry</td>
<td style="text-align:center">超对称</td>
</tr>
</tbody>
</table>
</div>
<script type="math/tex; mode=display">
\Lambda-CDM\quad\quad Lambda-CDM\quad Model \quad\quad \quad \Lambda-冷暗物质模型</script><p>1.观测表明宇宙是由物质组成</p>
<p>2.宇宙中占据支配地位的是暗物质，不发光，不参与强相互作用和电磁相互作用</p>
<p>3.星系形式的可见物质的空间分布呈现大的团状和长纤维状，同时存在上忆光年的星系密度很低的空洞结构</p>
<p>4.宇宙的空间部分是高度平坦的</p>
<p>5.星系和其他大尺度结构的形成是引力作用于宇宙的原初温度涨落和密度涨落的结果</p>
<p>6.不同方向上宇宙微波背景辐射温度接近于相同，但是有微小的涨落（10^-5量级)</p>
<p>7.宇宙在加速膨胀</p>
<p>8.暗物质和暗能量占宇宙总质-能密度的95%，暗能量70%、暗物质25%</p>
<p><img src="/assets/cj.png" alt="cj"></p>
<h2 id="热大爆炸宇宙学"><a href="#热大爆炸宇宙学" class="headerlink" title="热大爆炸宇宙学"></a>热大爆炸宇宙学</h2><h3 id="宇宙的膨胀"><a href="#宇宙的膨胀" class="headerlink" title="宇宙的膨胀"></a>宇宙的膨胀</h3><p>热大爆炸模型建立在爱因斯坦的广义相对论和宇宙在宇观尺度上为均匀和各向同性的假说上。描述均匀各向同性时空的度规是Robertson-Walker度规。FRW宇宙学体现为宇宙尺度因子随时间的演化。</p>
<script type="math/tex; mode=display">
辐射为主时期，a(t)\propto t^{1/2};实物为主时期，a(t)\propto t^{3/2};真空为主时期，a(t)\propto exp(t),</script><p><img src="/assets/image-20210106163728821.png" alt="image-20210106163728821"></p>
<p>牛顿发现<strong>引力不稳定性</strong>现象，在一个不均匀的宇宙中，物质密度大于平均密度的区域会最终会从低密度区吸引物质从而造成密度的不均匀度增大。爱因斯坦在相对论宇宙学中引入“宇宙学常数”防止宇宙收缩或膨胀。哈勃利用已有的径向速度数据，进一步发现了星系距离与其退行速度的相关关系—这是宇宙膨胀的证据，速度-距离关系的斜率给出了哈勃常数，即宇宙膨胀速率。膨胀的宇宙中传播的光子波长随时间变长，即“<strong>红移</strong>”（遥远星系的光谱线系统移向光谱的红端）。</p>
<p>有两种方法确定宇宙年龄：</p>
<p>1.基于宇宙学模型和宇宙膨胀历史，宇宙膨胀由其膨胀速度，引力减慢膨胀的程度和暗物质造成的膨胀加速支配。对于没有暗物质的平坦宇宙，宇宙年龄为哈勃时间的三分之二，即93亿年。一个含三分之一物质、三分之二暗物质的宇宙，年龄与哈勃时间相若，约135亿年。</p>
<p>2.利用恒星演化模型预测宇宙中最古老恒星的年龄。模型计算恒星内核中氢转化为氦的速率，与球状星团中恒星的观测比较给出的年龄为125亿年，不确定度为10%。还需考虑球状星团形成的时间，理论估计为10亿年。其他的天文钟：最古老白矮星的冷却、恒星爆炸中产生的几种放射性同位素的衰变和宇宙微波背景辐射，都给出相似的结果。</p>
<h3 id="宇宙微波辐射背景"><a href="#宇宙微波辐射背景" class="headerlink" title="宇宙微波辐射背景"></a>宇宙微波辐射背景</h3><p>大爆炸后38万年，宇宙温度高到足以让宇宙间一切实物完全电离，这个热等离子体中光子不断被自由电子散射，达到热平衡。随着宇宙膨胀，温度降低到大约3000K时。电子开始与质子结合形成原子，复合的结果是光子自由程增加，辐射与实物退藕，允许光子不受阻碍地在宇宙中传播。这一宇宙温度为3000K时最后一次被电子散射的辐射场今天已经冷却到温度为（2.75+-0.002）K，由于宇宙膨胀产生红移而在微波波段被探测到。</p>
<p>宇宙背景辐射是来自宇宙空间背景上的各向同性的微波辐射。1992年COBE(宇宙背景辐射探测卫星)首次探测到背景辐射的温度中的残余涨落。与温度涨落相关联的是复合时期前后物质密度的涨落，复合过程中及其后，由于引力不稳定性，密度不均匀性的幅度开始增长。如图为微波背景辐射温度的全天区图，图显示的温度各向异性直接反映了大爆炸后40万年宇宙的状态。</p>
<p><img src="/assets/cobe.jpg" alt="cobe"></p>
<h3 id="轻元素丰度"><a href="#轻元素丰度" class="headerlink" title="轻元素丰度"></a>轻元素丰度</h3><p>大爆炸理论的成功之一是观测到现在的轻元素丰度与对大爆炸中产生的元素丰度预测一致。观测表明宇宙中可见物质主要是氢(75%)和氦4(约25%)，还有少量其他元素。大爆炸认为大约大爆炸后三分钟前后，原初的中子与质子结合形成氢、氦和锂。比锂重的元素则是在恒星演化中形成的。大爆炸后约一分钟之前，温度太高导致原子核无法存在；大爆炸几分钟后，温度和密度降太低而核反应无法进行，于是大爆炸核合成结束，元素丰度”冻结”。</p>
<h2 id="现代宇宙学"><a href="#现代宇宙学" class="headerlink" title="现代宇宙学"></a>现代宇宙学</h2><h3 id="暗物质"><a href="#暗物质" class="headerlink" title="暗物质"></a>暗物质</h3><p>暗物质最可能的解释是它是一种新的、尚未被探测到的基本粒子，它能逃过早期宇宙中的湮没过程，有足够的粒子残存下来，而主导今天宇宙的静止质量密度。</p>
<h4 id="重子暗物质"><a href="#重子暗物质" class="headerlink" title="重子暗物质"></a>重子暗物质</h4><p>宇宙总质能密度只有大约5%可归于普通物质(主要由质子和中子组成，统称为重子)。其中只有1%是发光的从而可以被观测到，其余暗物质有许多可能性：黑洞，过去恒星的暗而致密的残骸，非常昏暗的恒星、行星、岩石、热或温的电离气体。</p>
<h4 id="非重子暗物质"><a href="#非重子暗物质" class="headerlink" title="非重子暗物质"></a>非重子暗物质</h4><p>其他证据表明有额外的(非重子)暗物质存在，占总体密度的25%。</p>
<p>推断暗物质存在的途径之一是观测处于大质量星系图后面的远处的星系。由于引力透镜效应，这些星系的像会被拉成弧状结构，亮度被放大。测量星系内恒星运动的速度和银河系外围光晕中小的伴星系的速度，以及星系在星系图中的运动，也表明有大量看不见的物质的存在，否则这些恒星和伴星系将不再受约束。发射X射线的气体温度的测量给出星系团中暗物质质量的另一估值。</p>
<p>非重子暗物质根据其运动快慢分为半相对论性的(热的)和及其非相对论性的(冷的)。若宇宙早期热暗物质粒子太多，这些快速运动的粒子通过扩散会破坏较小的密度的不均匀性，这样宇宙中首批形成的天体将是最大尺度的结构即超团，更小的天体是回来通过碎裂产生的，这将预言现时的宇宙中的存在的结构很少。而这与从初始的起伏成长为星系的大规模模拟研究的结果不相恰，此外空间望远镜和大型地面望远镜已经观测到红移极大、时间极早的星系，比超团形成更古老。于是推测宇宙中大部分非重子暗物质是冷暗物质。</p>
<p>非重子暗物质的候选者为：热平衡遗迹（弱相互作用有质量粒子）和非平衡遗迹（轴子和WIMPZILLAs）</p>
<p>热平衡遗迹：假想粒子，在宇宙早期处于热平衡状态，其相对丰度由粒子质量和宇宙温度比值决定；当粒子的产生或者消灭过程远小于宇宙膨胀速度时，粒子退出热平衡，相对丰度由于宇宙膨胀而降低。</p>
<p>热的热平衡遗迹(中微子)：中微子质量约为电子质量的千万分之一，只参与弱相互作用，属于非重子暗物质。中微子有三种：</p>
<script type="math/tex; mode=display">
电子中微子、\gamma中微子、\mu中微子</script><p>日本的超级神冈实验室和加拿大Sudbury中微子观测站发现了中微子传播中不同种类间的转变的证据</p>
<p>冷的热平衡遗迹：中微子被冻结是在相对论状态下，在非相对论状态下冻结的WIMP叫冷的热平衡遗迹。相互作用越强，热平衡停留时间约长，冻结温度越低。大的湮没截面得出更低的冻结温度，导致更低的丰度。任何湮没截面与弱相互作用截面可比的稳定粒子都是WIMP的候选者。首选的是最轻的超对称粒子。粒子物理学有个想法希望自然界有一种新的对称性，即SUSY。SUSY将为介于弱作用能量尺度(100GeV)和普朗克能量（10^19GeV）之间的阶梯结构提供解释。SUSY要求任何一个实物和辐射基本粒子都有其对应的超对称伴子，预测SUSY粒子的质量大于他们已经观测到的超伴子，并且衰变非常快。但是最轻的超对称粒子例外，由于宇称守恒，它们是稳定的。</p>
<p>由于暗物质相互作用弱，暗物质粒子在引力塌缩过程中不能有效地把能量耗散掉，从而不能形成很紧的束缚体，因此，在银河系和其他星系中，弱相互作用大质量粒子将只是与发光物质有松散的联系，形成环绕星系和其他星系团的暗物质晕。</p>
<p>非热平衡遗迹：轴子(axion)是对称性破缺可能产生的一种粒子，这种对称性用于解释弱相互作用中无CP破坏的。预测其质量远小于WIMP，为10^-3~10^-5eV，产生在宇宙早期夸克-强子转化时期前后。另一个可能的暗物质来源是超大质量粒子或”WIMPZILLAs”，其可能由于变化的引力场而产生在暴胀结束时，质量达10^12~10^16GeV，与早期宇宙中的夸克-胶子浆相互作用非常弱，在他们冻结出来时从未达到热平衡。</p>
<h3 id="暗能量"><a href="#暗能量" class="headerlink" title="暗能量"></a>暗能量</h3><p>若宇宙是以物质或辐射为主，若万有引力是吸引力，引力是大尺度上的唯一作用力，那么宇宙膨胀速度应当越来越慢，但是观测表明宇宙在加速膨胀。在FRW宇宙学中，若能量密度和压强满足不等式</p>
<script type="math/tex; mode=display">
\rho+3p<0</script><p>尺度因子的加速是可能的，但是实物和辐射的压强是正的，加速条件表示存在另一种质-能密度成分。与宇宙学常数相联系的能量与压强关系式为</p>
<script type="math/tex; mode=display">
\rho=-p</script><p>观测结果与此一致：宇宙中有三分之一的实物，三分之二的别种不同的形式，如具有巨大的负压强的暗能量。暗能量不与物质引力成团，现在对暗能量还没有解释，暗能量的理论解释至少存在两个主要的挑战：其一为暗能量的大小，计算量子真空所期待的能量，计算结果与观测值相差55个数量级以上。第二个突出问题是为什么我们处于刚好这样一个时期，宇宙的膨胀动力学正在变成以暗能量为主。</p>
<p>广义相对论中描述宇宙膨胀的两个关键性方程(kbd）：</p>
<script type="math/tex; mode=display">
H^2(t)=\frac{8πG}{3}\Sigma_ip_i(t)-\frac{j}{a^2(t)}</script><script type="math/tex; mode=display">
a^{..}/a=-4πG\Sigma_i(\rho_i+3p_i)</script><h3 id="暴胀"><a href="#暴胀" class="headerlink" title="暴胀"></a>暴胀</h3><p>由于<strong>因果性视界</strong>，标准宇宙学模型不能解释为什么宇宙是均匀和各向同性的，以及空间为什么这样平坦。                                              暴胀理论预言宇宙在早期能量密度以真空能为主，导致宇宙尺度因子快速增长。宇宙尺度因子的暴胀意味着宇宙的一个平滑的小空间区域指数膨胀，以致空间几何变成平坦。暴胀在今天的宇宙留下了可探测到的痕迹：观测到的原初温度涨落、原初密度涨落，及尚待观测的原初引力波。</p>
<h2 id="再电离后的宇宙"><a href="#再电离后的宇宙" class="headerlink" title="再电离后的宇宙"></a>再电离后的宇宙</h2><p>红移~1100时，宇宙温度足够低，允许电子和质子结合在一起，宇宙中绝大多数物质从完全电离状态迅速转变为电中性，由于引力的不稳定性发展出结构，第一代大质量恒星连同它们中心有黑洞的母星系一并形成，人们认为它们的辐射的光会将宇宙再度电离。</p>
<p>对于”黑暗时期”，行星的形成和演化等问题还有待了解。哈勃望远镜获得的深度曝光的照片加上地面望远镜的光谱观测，已经证认出大爆炸后几十亿年，红移为1~3这段时间内，星系经历了猛烈的恒星形成过程。如图<img src="/assets/Choques%20entre%20galaxias.jpg" alt="Choques entre galaxias"></p>
<p><a href="http://ramanujan25449.blogspot.com/2011/08/la-formacion-de-nuestra-galaxia.html" target="_blank" rel="noopener">参见链接</a></p>
]]></content>
  </entry>
  <entry>
    <title>python_note</title>
    <url>/2020/01/30/python_note/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>python 不推荐使用分号,而更倾向使用换行符作为每条语句的分隔</li>
<li>注意方法和函数的区别 方法是 obj.方法() 函数是 函数(obj)</li>
<li>混合使用制表符和空格会让 Python 解释器感到迷惑,在编写代码时应该使用制表符键,但一定要对编辑器进行设置,使其在文档中插入空格而不是制表符。<h3 id="变量和简单数据类型"><a href="#变量和简单数据类型" class="headerlink" title="变量和简单数据类型"></a>变量和简单数据类型</h3></li>
</ol>
<h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message &#x3D; &quot;Hello Python world!&quot;</span><br></pre></td></tr></table></figure>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>可用单引号,也可双引号</p>
<p>使用方法修改字符串的大小写:<br>    方法 是 Python 可对数据执行的操作。<code>变量.方法()</code></p>
<ol>
<li>方法<code>title()</code> 将每个单词的首字母都改为大写<br> 方法<code>upper()</code>将字符串改为全部大写<br> 方法<code>lower()</code>将字符串改为全部小写<br> 均不改变原来的值 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())</span><br><span class="line"><span class="comment"># 如果要改变原来的变量</span></span><br><span class="line">name = name.title()</span><br></pre></td></tr></table></figure></li>
<li><code>+</code> 合并(拼接)字符串 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span></span><br><span class="line">last_name = <span class="string">"lovelace"</span></span><br><span class="line">full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">message = <span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></li>
<li><code>\t</code>制表符   <code>\n</code>换行符</li>
<li>删除空白<br> <code>rstrip()</code>删除左边的空白<br> <code>lstrip()</code>删除右边的空白<br> <code>strip()</code>删除两端的空白<br> 如果要永久删除空白,必须将删除操作的结果存回变量中</li>
<li>使用字符串时避免语法错误 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 撇号位于两个双引号之间,因此 Python 解释器能够正确地理解这个字符串</span></span><br><span class="line">message = <span class="string">"One of Python's strengths is its diverse community."</span></span><br><span class="line">print(message)</span><br><span class="line"><span class="comment"># 然而,如果你使用单引号, Python 将无法正确地确定字符串的结束位置</span></span><br><span class="line">message = <span class="string">'One of Python'</span>s strengths <span class="keyword">is</span> its diverse community.<span class="string">'</span></span><br><span class="line"><span class="string">print(message)</span></span><br></pre></td></tr></table></figure></li>
<li>Python2 中的 print 语句不需要括号<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4>整数 浮点数(注意运算结果包含的小数位数可能是不确定的)</li>
</ol>
<p>此外还要注意类型错误,函数<code>str()</code>可以将非字符串值表示为字符串,函数<code>int()</code>可将字符串值表示为数值<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">"Happy "</span> + str(age) + <span class="string">"rd Birthday!"</span></span><br><span class="line"></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p>
<p>python2 中整数除法的结果只包含整数部分,小数部分被删除</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释用<code>#</code>标识,<code>#</code>后面的内容都会被python解释器忽略</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure>
<p>如果你让 Python 将列表打印出来, Python 将打印列表的内部表示,包括方括号:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">[<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br></pre></td></tr></table></figure></p>
<h4 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h4><ol>
<li>访问列表元素 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 只返回该元素,而不包括方括号和引号</span></span><br><span class="line">print(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 返回倒数第二个元素</span></span><br><span class="line"><span class="keyword">print</span>[bicycles[<span class="number">-2</span>]]</span><br></pre></td></tr></table></figure></li>
<li>方法 append() 在列表末尾添加元素 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></li>
<li>方法 insert() 在列表中插入元素 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line"><span class="comment"># 在索引 1 处添加空间,并且索引 1 右边的元素都右移一个位置</span></span><br><span class="line">motorcycles.insert(<span class="number">1</span>, <span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></li>
<li>使用 del 语句删除元素 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></li>
<li>使用方法<code>pop()</code>删除末尾元素,<code>pop()</code>会返回弹出的值<br> 术语弹出 ( pop )源自这样的类比:列表就像一个栈,而删除列表末尾的元素相当于弹出栈顶元素。 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">print(motorcycles) <span class="comment"># ['honda', 'yamaha', 'suzuki']</span></span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line">print(motorcycles) <span class="comment"># ['honda', 'yamaha']</span></span><br><span class="line">print(popped_motorcycle) <span class="comment"># suzuki</span></span><br></pre></td></tr></table></figure></li>
<li>使用方法<code>pop()</code>弹出列表中任何位置处的元素<br> 只需在括号中指定要删除的元素的索引即可。</li>
<li>使用方法<code>remove()</code>根据值删除元素 (无返回值)<br> 注意:方法 remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次,就需要使用循环来判断是否删除了所有这样的值。 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'ducati'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>]</span><br><span class="line">print(motorcycles)</span><br><span class="line">motorcycles.remove(<span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure>
<h4 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h4></li>
<li>使用方法<code>sort()</code>对列表进行永久性排序<br> <code>.sort(reverse=True)</code>可按与字母顺序相反的顺序排列列表元素</li>
<li>使用函数<code>sorted()</code>对列表进行临时排序 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(sorted(cars))</span><br><span class="line">print(sorted(cars, reverse=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></li>
<li>使用方法<code>reverse()</code>永久反转列表元素的排列顺序</li>
<li>使用函数<code>len()</code>可快速获悉列表的长度</li>
</ol>
<h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><ol>
<li>for 循环, 每个缩进的代码行都是循环的一部分 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    print(magician)</span><br><span class="line">    print(magician.upper())</span><br></pre></td></tr></table></figure>
 注意:1. 勿写出不必要的缩进 2. 无遗漏冒号<h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4></li>
<li>函数<code>range()</code> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意 range() 函数返回的是左闭右开的</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用 range() 创建数字列表</span></span><br><span class="line">numbers = list(range(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数 range() 时,还可指定步长</span></span><br><span class="line"><span class="comment"># 函数 range() 从 2 开始数,然后不断地加 2 ,直到达到或超过终值 11</span></span><br><span class="line">even_numbers = list(range(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line">print(even_numbers)</span><br></pre></td></tr></table></figure></li>
<li>函数 min() max() sum() <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">print(min(digits))</span><br><span class="line">print(max(digits))</span><br><span class="line">print(sum(digits))</span><br></pre></td></tr></table></figure></li>
<li>列表解析 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4></li>
<li><p>切边</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line"><span class="comment"># 打印列表的的一个切片,第1~3个元素</span></span><br><span class="line">print(players[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 如果你没有指定起始索引,将自动从列表开头开始</span></span><br><span class="line">print(players[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 如果你没有指定终止索引,切片将终止于列表末尾</span></span><br><span class="line">print(players[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>
<p> 索引也可以是负数</p>
</li>
<li><p>遍历切边</p>
 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历切片</span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">    print(player.title())</span><br></pre></td></tr></table></figure></li>
<li>使用切边复制列表 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>]</span><br><span class="line">a = players  <span class="comment"># a 其实是 players 的引用</span></span><br><span class="line">b = players[:]  <span class="comment"># ｂ 是复制了 players　的内容</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组是＂不可改变的列表＂</p>
<p>定义：<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure></p>
<p>注意：元组内的元素是不可改变的，但可以给存储元组的变量赋值<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dimension = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dimension)</span><br><span class="line"></span><br><span class="line">dimension = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure></p>
<h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>每条 if 语句的核心都是一个值为<code>True</code>或<code>False</code>的表达式,这种表达式被称为条件测试 。为了可读性，我建议每个条件测试都分别放在括号里,在括号左边加<code>not</code>就是非<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line"><span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">    print(car.upper())</span><br></pre></td></tr></table></figure></p>
<ol>
<li>检查是否相等时对大小写敏感 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line">print(car == <span class="string">'Bmw'</span>)</span><br><span class="line"><span class="comment"># 如果不想区分大小写</span></span><br><span class="line">print(car.lower() == <span class="string">'Bmw'</span>.lower())</span><br></pre></td></tr></table></figure></li>
<li>检查多个条件可用<code>and</code>和<code>or</code></li>
<li>可以检查列表是否为空</li>
<li>检查特定值是否在列表中，用<code>in</code>和<code>not in</code></li>
<li>除了<code>if-else</code>,还有<code>if-elif-else</code>和<code>if-elif</code> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure>
 Python 并不要求<code>if-elif</code>结构后面必须有<code>else</code>代码块。有时使用<code>elif</code>更加清晰 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure></li>
<li>检查特定字符串值是否在另一个字符串中,使用<code>in</code>和<code>not in</code><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3>字典由一系列<code>键——值</code>对组成,(我觉得有点像map和struct的结合体)<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;</span><br><span class="line">    <span class="string">'color'</span>: <span class="string">'green'</span>,</span><br><span class="line">    <span class="string">'points'</span>: <span class="number">5</span>,  <span class="comment"># 这个逗号可加可不加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 添加键值对</span></span><br><span class="line">alien_0[<span class="string">'x_position'</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 删除键值对</span></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">'points'</span>]</span><br><span class="line">print(alien_0[<span class="string">'color'</span>])</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure>
也可以创建空键值对<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4></li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 方法 items() 返回一个 键——值对 的列表接下来, for 循环依次将每个 键——值对 存储到指定的两个变量中。</span></span><br><span class="line"><span class="comment"># 注意,键——值对 的返回顺序与存储顺序不同。 Python 不关心 键——值对 的存储顺序,而只跟踪键和值之间的关联关系。</span></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(name.title() + <span class="string">"'s favorite language is "</span> +</span><br><span class="line">          language.title() + <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 keys() 返回 键 的列表</span></span><br><span class="line"><span class="comment"># 事实上,遍历字典时,会默认遍历所有的键,如果把.keys()去掉,结果也是一样的</span></span><br><span class="line"><span class="comment"># 此外,可以使用函数 sorted() 对返回的列表排序</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sorted(favorite_languages.keys()):</span><br><span class="line">    print(name.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 values() 返回 值 的列表</span></span><br><span class="line"><span class="comment"># 使用函数 set() 去除重复项</span></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">    print(language.title())</span><br></pre></td></tr></table></figure>
<p>针对不同的使用场景,我们可以</p>
<ol>
<li>在列表中存储列表</li>
<li>在列表中存储字典</li>
<li>在字典中存储列表</li>
<li>在字典中存储字典</li>
</ol>
<h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复读机</span></span><br><span class="line">message = input(<span class="string">"Tell me something, and I will repeat it back to you: \n"</span>)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure>
<p>函数 input() 接受一个参数:即要向用户显示的提示 或说明,让用户知道该如何做。程序等待用户输入,并在用户按回车键后继续运行。输入存储在变量 message 中</p>
<p>注意: Python 2.7 应使用<code>raw_input()</code>,因为Python 2.7中的<code>intput()</code>将用户输入解读为 Python 代码,并尝试运行它们。</p>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span></span><br><span class="line">message = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">'quit'</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">'quit'</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure>
<p>使用<code>break</code>不再执行余下的代码,并且退出循环<br>使用<code>continue</code>不再执行余下的代码,返回到循环开头,并根据条件测试结果决定是否继续执行循环</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用关键字 def 来定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    <span class="string">"""此为文档字符串(docstring)的注释,描述函数是做什么的。文档字符串用三引号括</span></span><br><span class="line"><span class="string">起, Python 使用它们来生成有关程序中函数的文档。需要缩进"""</span></span><br><span class="line">    full_name = first_name+<span class="string">' '</span>+last_name</span><br><span class="line">    print(<span class="string">'Hello, '</span> + full_name.title() + <span class="string">'!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数,传递实参的方式为 位置实参</span></span><br><span class="line">greet_user(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递实参的方式为 关键字实参</span></span><br><span class="line">greet_user(last_name=<span class="string">'hendrix'</span>, first_name=<span class="string">'jimi'</span>)</span><br></pre></td></tr></table></figure>
<p>形参还可以有默认值,注意:使用默认值时,在形参列表中必须先列出没有默认值的形参,再列出有默认值的实参。这让 Python 依然能够正确地解读位置实参。还有,给形参指定默认值时,等号两边不要有空格</p>
<p>如果形参是列表,并且你不想改变它(因为形参的赋值操作好像是引用那样的),你可以使用切片<code>[:]</code>来创建列表的副本,作为实参传递给函数</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回值使用<code>return</code> 注意:return后函数就结束</p>
<h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">    <span class="string">""" 概述要制作的比萨 """</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure>
<p>形参名 *toppings 中的星号让 Python 创建一个名为 toppings 的<code>空元组</code>,并将收到的所有值都封装到这个元组中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">""" 创建一个字典,其中包含我们知道的有关用户的一切 """</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    <span class="keyword">return</span> user_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span>, <span class="string">'einstein'</span>,</span><br><span class="line">                             location=<span class="string">'princeton'</span>,</span><br><span class="line">                             field=<span class="string">'physics'</span>)</span><br></pre></td></tr></table></figure>
<p>形参 **user_info 中的两个星号让 Python 创建一个名为 user_info 的<code>空字典</code>,并将收到的所有名称 — 值对都封装到这个字典中。</p>
<h4 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h4><p>函数的优点之一是,使用它们可将代码块与主程序分离。将函数存储在被称为模块 的独立文件中,<br>再将模块导入 到主程序中。 <code>import module_name</code>语句允许在当前运行的程序文件中使用模块中的代码。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza  <span class="comment"># 导入 pizza.py 文件内的所有内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用 module_name.function_name()</span></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure>
<p>导入模块中的特定函数:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br></pre></td></tr></table></figure></p>
<p>给函数和模块指定别名:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn <span class="comment"># 给函数 function_name() 指定了别名 fn()</span></span><br><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn <span class="comment"># 给模块 module_name 指定别名 mn</span></span><br></pre></td></tr></table></figure></p>
<p>导入模块中的所有函数:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 一次模拟小狗的简单尝试 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化属性 name 和 age"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 模拟小狗被命令时蹲下 """</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 模拟小狗被命令时打滚 """</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>)  <span class="comment"># 创建实例</span></span><br><span class="line"><span class="comment"># 访问属性: 在类内是 self.attr 类外 obj.attr</span></span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name.title() + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure>
<p>类中的函数称为方法.方法的形参<code>self</code>必不可少,还必须位于其他形参的前面.方法被调用时会自动传递实参<code>self</code>,它是一个指向实例本身的引用,让实例能够访问类中的属性和方法。</p>
<p><code>__int__()</code>是一个特殊的方法,当根据类创建新对象时,会自动调用该方法.类似于其他具有面向对象特性的语言中的构造函数</p>
<p>注意:在 Python 2.7 中创建类时,需要做细微的修改 —— 在括号内包含单词 object :<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(object)</span>:</span></span><br></pre></td></tr></table></figure><br>给属性指定默认值:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化描述汽车的属性 """</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>修改属性的值</p>
<ol>
<li>直接修改</li>
<li>通过方法修改</li>
</ol>
<p>类的属性也可是其他类的实例</p>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>一个类继承另一个类时,它将自动获得另一个类的所有属性和方法;原有的类称为父类 ,而新类称为子类 。子类继承了其父类的所有属性和方法,同时还可以定义自己的属性和方法,还可以重写从父类继承过来的方法</p>
<p>创建子类时,父类必须包含在当前文件中,且位于子类前面。定义子类时,必须在括号内指定父类的名称。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 一次模拟汽车的简单尝试 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">""" 电动汽车的独特之处 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化父类的属性 """</span></span><br><span class="line">        super().__init__(make, model, year)</span><br></pre></td></tr></table></figure>
<p><code>super()</code>是一个特殊函数,帮助 Python 将父类和子类关联起来。<code>super().__init__()</code>初始化从父类继承而来的属性.父类也称为超类</p>
<p>注意:在 Python 2.7 中继承类时,函数 super() 需要两个实参:子类名和对象 self</p>
<h4 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> class_name</span><br></pre></td></tr></table></figure>
<p>导入多个类<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> class_name1, class_name2, class_name3</span><br></pre></td></tr></table></figure></p>
<p>导入模块中的所有类<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><br>不推荐使用这种导入方式,因为如果你不小心导入了一个与程序文件中其他东西同名的类,将引发难以诊断的错误。需要从一个模块中导入很多类时,最好导入整个模块.因为此时使用<code>module_name.class_name</code>来访问类,不会引起名称冲突</p>
<h4 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h4><p>模块 collections 中的一个类 —— OrderedDict<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"></span><br><span class="line">favorite_languages[<span class="string">'jen'</span>] = <span class="string">'python'</span></span><br><span class="line">favorite_languages[<span class="string">'sarah'</span>] = <span class="string">'c'</span></span><br><span class="line">favorite_languages[<span class="string">'edward'</span>] = <span class="string">'ruby'</span></span><br><span class="line">favorite_languages[<span class="string">'phil'</span>] = <span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(name.title() + <span class="string">"'s favorite language is "</span> +</span><br><span class="line">          language.title() + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><br>OrderedDict 实例的行为几乎与字典相同,区别只在于记录了键 — 值对的添加顺序。</p>
<h4 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h4><p>类名应采用驼峰命名法 ,即将类名中的每个单词的首字母都大写,而不使用下划线。<br>实例名和模块名都采用小写格式,并在单词之间加上下划线。</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure>
<p>open(‘pi_digits.txt’) 返回一个表示文件 pi_digits.txt 的对象,然后将这个对象存储在变量 file_object 中</p>
<p>使用关键字with可以不用调用close()来关闭文件,它会在不再需要访问文件后自动将其关闭。</p>
<p>由于read() 到达文件末尾时返回一个空字符串,对contents使用方法<code>rstrip()</code>可以删除右边多余的空白,同理还有<code>lstrip()</code>删除左边空白;<code>strip()</code>删除两端空白(不包括内部)</p>
<h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>相对路径: 在相对于当前运行的程序所在目录来查找<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 Linux 和 OS X 中</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Windows 系统中</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p>
<p>绝对路径<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 Linux 和 OS X 中</span></span><br><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Windows 系统中</span></span><br><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p>
<p>逐行读取<br>要以每次一行的方式检查文件,可对文件对象使用 for 循环:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure><br>创建一个包含文件各行内容的列表:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p>
<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming.\n"</span>)</span><br><span class="line">    file_object.write(<span class="string">"I love creating new games.\n"</span>)</span><br></pre></td></tr></table></figure>
<p>第二个参数为模式实参:</p>
<ol>
<li>读取模式<code>&#39;r&#39;</code></li>
<li>写入模式<code>&#39;w&#39;</code>  覆盖文件原来的内容。</li>
<li>附加模式<code>&#39;a&#39;</code>  将内容附加到文件末尾,而不是覆盖文件原来的内容。</li>
<li>读取和写入文件的模式<code>&#39;r+&#39;</code></li>
</ol>
<p>如果你省略了模式实参, Python 将以默认的只读模式打开文件。如果你要写入的文件不存在,函数 open() 将自动创建它。</p>
<p>然而,以写入模式<code>&#39;w&#39;</code>打开文件时千万要小心,因为如果指定的文件已经存在, Python 将在返回文件对象前清空该文件。</p>
<h4 id="使用-json-存储数据"><a href="#使用-json-存储数据" class="headerlink" title="使用 json 存储数据"></a>使用 json 存储数据</h4><p>很多程序都要求用户输入某种信息,如让用户存储游戏首选项或提供要可视化的数据。程序都把用户提供的信息存储在列表和字典等数据结构中。一种简单的方式是使用模块 json 来存储数据。</p>
<p>模块 json 让你能够将简单的 Python 数据结构转储到文件中,并在程序再次运行时加载该文件中的数据。</p>
<p>注意: JSON ( JavaScript Object Notation )格式最初是为 JavaScript 开发的,但随后成了一种常见格式,被包括 Python 在内的众多语言采用。</p>
<h5 id="使用-json-dump-和-json-load"><a href="#使用-json-dump-和-json-load" class="headerlink" title="使用 json.dump() 和 json.load()"></a>使用 json.dump() 和 json.load()</h5><p>与普通的文件读取和写入不同的是,这种方法存储的是数据结构,比如字符串 列表 字典等</p>
<p>使用 json.dump() 将数据结构存储到文件:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br></pre></td></tr></table></figure><br>使用 json.load() 将文件里的数据结构存储到变量中:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p>
<p>一个用户登录的示例:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""用户登录,不需密码"""</span></span><br><span class="line">    <span class="comment"># 如果以前存储了用户名,就开始游戏</span></span><br><span class="line">    <span class="comment"># 否则,就提示用户输入用户名并存储它</span></span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"这似乎是您第一次登录, What is your name?\n: "</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username, f_obj)</span><br><span class="line">        login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Welcome, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">login()</span><br></pre></td></tr></table></figure></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="try-except-代码块"><a href="#try-except-代码块" class="headerlink" title="try-except 代码块"></a>try-except 代码块</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"ValueError!"</span>)</span><br><span class="line">print(<span class="string">'Hello world'</span>)</span><br></pre></td></tr></table></figure>
<p>如果 try 代码块中的代码没有引发异常,则跳过;如果引发了异常,则寻找引发的错误与指定错误相同的 except 代码块中的代码.这样,用户看到的是一条友<br>好的错误消息,而不是 traceback.</p>
<p>该示例的输出为:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You can&#39;t divide by zero!</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure></p>
<p>这种情况经常会出现在要求用户提供输入的程序中,程序能够妥善地处理无效输入,再提示用户提供有效输入,而不至于引发程序崩溃</p>
<h4 id="try-except-else-代码块"><a href="#try-except-else-代码块" class="headerlink" title="try-except-else 代码块"></a>try-except-else 代码块</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"Second number: "</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number) / int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure>
<p>本例中,如果发生<code>ZeroDivisionError</code>的错误,就提示用户,如果没发生任何错误就打印除法的结果</p>
<h4 id="处理-FileNotFoundError-异常"><a href="#处理-FileNotFoundError-异常" class="headerlink" title="处理 FileNotFoundError 异常"></a>处理 FileNotFoundError 异常</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""计算一个文件大致包含多少个单词"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">"Sorry, the file "</span> + filename + <span class="string">" does not exist."</span></span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算文件大致包含多少个单词</span></span><br><span class="line">        words = contents.split()  <span class="comment"># 方法 split() 根据字符串创建一个单词列表</span></span><br><span class="line">        num_words = len(words)</span><br><span class="line">        print(<span class="string">"The file "</span> + filename + <span class="string">" has about "</span> + str(num_words) + <span class="string">" words."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">'alice.txt'</span>, <span class="string">'siddhartha.txt'</span>,</span><br><span class="line">             <span class="string">'moby_dick.txt'</span>, <span class="string">'little_women.txt'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">    count_words(filename)</span><br></pre></td></tr></table></figure>
<h4 id="失败时一声不吭"><a href="#失败时一声不吭" class="headerlink" title="失败时一声不吭"></a>失败时一声不吭</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">""" 计算一个文件大致包含多少个单词 """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        --snip--</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">'alice.txt'</span>, <span class="string">'siddhartha.txt'</span>,</span><br><span class="line">             <span class="string">'moby_dick.txt'</span>, <span class="string">'little_women.txt'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>Python 标准库中的模块 unittest 提供了代码测试工具。<br>单元测试 用于核实函数的某个方面没有问题;测试用例 是一组单元测试,这些单元测试一起核实函数在各种情形下的行为都符合要求。良好的测试用例考虑到了函数可能收到的各种输入,包含针对所有这些情形的测试。<br>全覆盖式测试 用例包含一整套单元测试,涵盖了各种可能的函数使用方式。对于大型项目,要实现全覆盖可能很难。通常,最初只要针对代码的重要行为编写测试即可,等项目被广泛使用时再考虑全覆盖。</p>
<h4 id="对函数进行测试"><a href="#对函数进行测试" class="headerlink" title="对函数进行测试"></a>对函数进行测试</h4><p>文件<code>name_function.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first, last)</span>:</span></span><br><span class="line">    <span class="string">"""生成格式化的整名"""</span></span><br><span class="line">    full_name = first + <span class="string">' '</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><br>文件<code>test_name_function.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">""" 测试 name_function.py"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 能够正确地处理像 Janis Joplin 这样的姓名吗? """</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>, <span class="string">'joplin'</span>)</span><br><span class="line">        <span class="comment"># 断言得到的结果与期望的结果是否相等</span></span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">'Janis Joplin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><br>所有继承了<code>unittest.TestCase</code>的类中的所有以<code>test</code>开头的方法都会被运行</p>
<h4 id="对类进行测试"><a href="#对类进行测试" class="headerlink" title="对类进行测试"></a>对类进行测试</h4><p>Python 在<code>unittest.TestCase</code>类中提供了很多断言方法。<br>| 方法                      | 用途                   |<br>| ————————————- | ——————————— |<br>| assertEqual(a, b)         | 核实 a == b            |<br>| assertNotEqual(a, b)      | 核实 a != b            |<br>| assertTrue(x)             | 核实 x 为True          |<br>| assertFalse(x)            | 核实 x 为False         |<br>| assertIn(item , list )    | 核实 item 在 list 中   |<br>| assertNotIn(item , list ) | 核实 item 不在 list 中 |</p>
<p>下面来编写一个类进行测试。来看一个帮助管理匿名调查的类:<br>文件<code>survey.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" 收集匿名调查问卷的答案 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span></span><br><span class="line">        <span class="string">""" 存储一个问题,并为存储答案做准备 """</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 显示调查问卷 """</span></span><br><span class="line">        print(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self, new_response)</span>:</span></span><br><span class="line">        <span class="string">""" 存储单份调查答卷 """</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 显示收集到的所有答卷 """</span></span><br><span class="line">        print(<span class="string">"Survey results:"</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">'- '</span> + response)</span><br></pre></td></tr></table></figure></p>
<p>为证明 AnonymousSurvey 类能够正确地工作,我们来编写一个使用它的程序:<br>文件<code>language_survey.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个问题,并创建一个表示调查的 AnonymousSurvey 对象</span></span><br><span class="line">question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">my_survey = AnonymousSurvey(question)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示问题并存储答案</span></span><br><span class="line">my_survey.show_question()</span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit.\n"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = input(<span class="string">"Language: "</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示调查结果</span></span><br><span class="line">print(<span class="string">"\nThank you to everyone who participated in the survey!"</span>)</span><br><span class="line">my_survey.show_results()</span><br></pre></td></tr></table></figure><br>下面来编写一个测试:<br>文件<code>test_survey.py</code><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonmyousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">""" 针对 AnonymousSurvey 类的测试 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 测试单个答案会被妥善地存储 """</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">'English'</span>)</span><br><span class="line">        self.assertIn(<span class="string">'English'</span>, my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 测试三个答案会被妥善地存储 """</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            self.assertIn(response, my_survey.responses)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><br>其实…….和上一个对函数进行测试差不多嘛</p>
<h4 id="方法-setUp"><a href="#方法-setUp" class="headerlink" title="方法 setUp()"></a>方法 setUp()</h4><p><code>unittest.TestCase</code>类包含方法<code>setUp()</code>。如果你在 TestCase 类中包含了方法<code>setUp()</code>, Python 将先运行它,再运行各个以 test 打头的方法。这样,在你编写的每个测试方法中都可使用在方法 setUp() 中创建的对象了。</p>
<p>上一小节的文件<code>test_survey.py</code>可以修改如下:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">""" 针对 AnonymousSurvey 类的测试 """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案,供使用的测试方法使用</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>, <span class="string">'Spanish'</span>, <span class="string">'Mandarin'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 测试单个答案会被妥善地存储 """</span></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>], self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 测试三个答案会被妥善地存储 """</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response, self.my_survey.responses)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure></p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>pip 是一个负责为你下载并安装 Python 包的程序。</p>
<h3 id="外星人入侵"><a href="#外星人入侵" class="headerlink" title="外星人入侵"></a>外星人入侵</h3><p>如果你使用的是 Python 3 ,就需要执行两个步骤:安装 Pygame 依赖的库;下载并安装 Pygame 。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python3-dev mercurial</span><br><span class="line">$ sudo apt-get install libsdl-image1.2-dev libsdl2-dev libsdl-ttf2.0-dev</span><br></pre></td></tr></table></figure><br>这将安装运行《外星人入侵》时需要的库。如果你要启用 Pygame 的一些高级功能,如添加声音的功能,可安装下面这些额外的库:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libsdl-mixer1.2-dev libportmidi-dev</span><br><span class="line">$ sudo apt-get install libswscale-dev libsmpeg-dev libavformat-dev libavcode-dev</span><br><span class="line">$ sudo apt-get install python-numpy</span><br></pre></td></tr></table></figure><br>接下来,执行下面的命令来安装 Pygame:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install --user hg+http://bitbucket.org/pygame/pygame</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>MATLAB编程</title>
    <url>/2020/02/09/MATLAB%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="MATLAB编程"><a href="#MATLAB编程" class="headerlink" title="MATLAB编程"></a>MATLAB编程</h1><h2 id="一、M文件"><a href="#一、M文件" class="headerlink" title="一、M文件"></a>一、M文件</h2><p>M文件是将处理问题的各种命令融合到一个文件中，该文件以.m为拓展名，然后由MAYLAB系统编译，得出相应的运行结果。M文件有脚本文件和函数文件两种。脚本文件不需要输入参数和输出参数，按照文件中指定的顺序执行命令序列。而函数文件则接受其他数据为输入参数，且可返回数据。</p>
<p>MATLAB脚本(MATLAB scripts)：</p>
<p>简单执行一系列MATLAB语句，需多次运行的文件</p>
<p>不能接受输入参数，也不返回输出结果</p>
<p>将变量保存在基本(Base)工作空间，这是多个脚本和命令窗口建立的变量的共享空间。</p>
<p>MTALAB函数(MATLAB functions)：</p>
<p>有函数定义语句——function，主要用来写应用程序</p>
<p>能够接受输入参数，也能返回输出结果</p>
<p>有自己单独的工作空间，变量保存于此</p>
<h3 id="1-1、M文件编辑器"><a href="#1-1、M文件编辑器" class="headerlink" title="1-1、M文件编辑器"></a>1-1、M文件编辑器</h3><p>M文件不仅可以用来编辑M文件，还可对M文件进行交互性调试。而且，M文件编辑器还可用于阅读和编辑其他ASCII码文件。打开M文件编辑器：</p>
<p>单击常用工具栏上的“新建”图标。</p>
<p>单击【File】【New】【M-File】菜单命令新建空白M文件。</p>
<p>在“命令”窗口直接输入edit命令，或使用edit mfiles命令编辑已存在的文件，mfiles为用户需编辑的文件名（可不带扩展名)</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> = <span class="title">fact</span><span class="params">(n)</span>                    %函数定义行</span></span><br><span class="line"><span class="comment">% Compute a factorial value                % H1行</span></span><br><span class="line"><span class="comment">% FACT(N) returns the factorial of N.   % help脚本文件</span></span><br><span class="line"><span class="comment">% usually denotednby n!</span></span><br><span class="line"><span class="comment">% put simply, FACT(N) is PROD(1:N)             %注释</span></span><br><span class="line">f = prod(<span class="number">1</span>:n);                           <span class="comment">%函数体或脚本主体</span></span><br></pre></td></tr></table></figure>
<p><strong>1.函数定义行</strong>：定义函数名称，定义输入输出变量的数量、顺序。脚本式M文件没有此行。函数定义语句为：                                                                                         <code>function [out1,out2,out3...] =  funName(in1,in2,in3...)</code>                                                                               无输出的课用空括号[ ],或者无括号和等号：<code>function funName(in1,in2,in3...)</code></p>
<p><strong>2.H1行</strong>：Help文本的第一行，用%开始，命令窗口输入 <code>help filename</code> 或 <code>lookfor filename</code>可显示H1行文本。</p>
<p><strong>3.Help文本</strong>：可以是连续多行的注释文本，只能在命令窗口观看，遇到第一个非注释行结束，其他注释行不被显示。lookfor 命令是搜索所有函数命令中包括filename字符串的汉，将函数H1行列出来。</p>
<p><strong>4.注释</strong>：以%开始的注释可出现在函数任何位置，也可在语句右边。若注释行很多，可使用注释块操作符—— %{……%}</p>
<p><strong>5.函数体</strong>：函数体是函数和脚本中计算和处理数据的主体，可包含进行计算和赋值的语句、函数调用、循环和流控制语句，以及注释语句。空行等。</p>
<h3 id="1-2、脚本式M文件"><a href="#1-2、脚本式M文件" class="headerlink" title="1-2、脚本式M文件"></a>1-2、脚本式M文件</h3><p>对较多命令进行重复输入、调试等用户可以将需要重复输入的所有命令按顺序放到M文件，每次运行只要输入文件名或单击”运行“按钮，或F5快捷键。脚本式文件的运行相当于在命令窗口依次输入运行命令。不需要预先定义变量，命令文件中变量都是全局变量。</p>
<h3 id="1-3、函数式M文件"><a href="#1-3、函数式M文件" class="headerlink" title="1-3、函数式M文件"></a>1-3、函数式M文件</h3><p>函数式命令文件一般要自带变量，且有返回结果，也可不带变量，此时文件中一般会使用一些全局变量来实现与外界和其他函数之间的数据交换。以关键词function开始，实质为用户向MATLAB函数库中添加自定义子函数。</p>
<h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><p>MATLAB基本程序为顺序结构，但不能满足程序设计需要，需使用流程控制语句。包括判断语句，循环语句，分支语句等。</p>
<h3 id="2-1、顺序结构"><a href="#2-1、顺序结构" class="headerlink" title="2-1、顺序结构"></a>2-1、顺序结构</h3><p>1、if语句</p>
<p><code>if···end</code>             <code>if···else···end</code>               <code>if···elseif···else···end</code></p>
<p>2、switch语句</p>
<p><code>switch···case···end</code></p>
<p>3、for循环（嵌套）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> variable = initval:stepval:endval      <span class="comment">%variable表示变量，默认步长为1</span></span><br><span class="line">     statement</span><br><span class="line">     ···</span><br><span class="line">     statement</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>4、while循环</p>
<p><code>while 表达式    执行语句      end</code></p>
<p>5、continue命令——-break命令</p>
<p>跳过进行下一次循环———-根据终止条件跳出循环</p>
<p>6、return命令</p>
<p>使得当前调用的函数正常退出   <code>return</code></p>
<h3 id="2-2、人机交互命令"><a href="#2-2、人机交互命令" class="headerlink" title="2-2、人机交互命令"></a>2-2、人机交互命令</h3><p>1、输入提示命令input</p>
<p><code>user_entry = input(&#39;prompt&#39;)</code>            <code>user_entry = input(&#39;prompt&#39;,&#39;s&#39;)</code></p>
<p>2、请求键盘输入命令keyboard</p>
<p>如keyboard命令被放在M文件中，将终止文件的继续执行，将控制权交给键盘。可通过在提示符前显示K表征这种特殊状态，M文件中使用该命令对程序调控及修改变量都方便。为终止keyboard模式，可键入命令return，然后按回车键。</p>
<p>3、pause命令</p>
<p>用于暂时中止程序运行，等待用户按任意键继续运行，可用于查询中间结果。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">pause             <span class="comment">%暂停</span></span><br><span class="line">pause(n)          <span class="comment">%暂停n秒</span></span><br><span class="line">pause on            <span class="comment">%允许后续的pause命令中止程序运行</span></span><br><span class="line">pause off            <span class="comment">%保证后续的pause或pause(n)命令都不中止程序运行</span></span><br></pre></td></tr></table></figure>
<p>4、echo语句</p>
<p>查看文件中命令的执行情况，需要将M文件中所有命令在执行过程中显示出来，可使用echo命令。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%脚本文件</span></span><br><span class="line">echo on    <span class="comment">%显示以后所有执行的命令</span></span><br><span class="line">echo off    <span class="comment">%不显示以后所有执行的命令</span></span><br><span class="line">echo        <span class="comment">%两种方式间切换</span></span><br><span class="line"><span class="comment">%函数文件</span></span><br><span class="line">echo fcnname on        <span class="comment">%使fcnname指定的M文件的执行命令显示出来</span></span><br><span class="line">echo fcnname off       <span class="comment">%使fcnname指定的M文件的执行命令不显示出来</span></span><br><span class="line">echo fcnname          <span class="comment">%在以上两种情况切换</span></span><br><span class="line">echo on all          <span class="comment">%其后所有是M文件的执行命令显示出来</span></span><br><span class="line">echo off all            <span class="comment">%其后所有的M文件的执行命令不显示出来</span></span><br></pre></td></tr></table></figure>
<h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>MATLAB中函数创建方法</p>
]]></content>
  </entry>
  <entry>
    <title>Matlab绘图</title>
    <url>/2019/12/28/Matlab%E7%BB%98%E5%9B%BE/</url>
    <content><![CDATA[<hr>
<h1 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h1><h2 id="图线色彩和线型"><a href="#图线色彩和线型" class="headerlink" title="图线色彩和线型"></a>图线色彩和线型</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">线型</th>
<th style="text-align:center">选项</th>
<th style="text-align:center">线型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:center">蓝色</td>
<td style="text-align:center">m</td>
<td style="text-align:center">品红色</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">绿色</td>
<td style="text-align:center">y</td>
<td style="text-align:center">黄色</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">红色</td>
<td style="text-align:center">k</td>
<td style="text-align:center">黑色</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:center">青色</td>
<td style="text-align:center">w</td>
<td style="text-align:center">白色</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">点</td>
<td style="text-align:center">V</td>
<td style="text-align:center">朝下三角符号</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:center">圆圈</td>
<td style="text-align:center">^</td>
<td style="text-align:center">朝上三角符号</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">叉号</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">朝左三角符号</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">加号</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">朝右三角符号</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">星号</td>
<td style="text-align:center">p(pentagram)</td>
<td style="text-align:center">五角星符</td>
</tr>
<tr>
<td style="text-align:center">s(square)</td>
<td style="text-align:center">方块形</td>
<td style="text-align:center">h(hexagram)</td>
<td style="text-align:center">六角形符</td>
</tr>
<tr>
<td style="text-align:center">d(diamond)</td>
<td style="text-align:center">菱形符</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>e.g.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=(<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,<span class="built_in">sin</span>(x),<span class="string">'cp'</span>,x,<span class="built_in">cos</span>(x),<span class="string">'g*'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二维统计分析图"><a href="#二维统计分析图" class="headerlink" title="二维统计分析图"></a>二维统计分析图<img src="/assets/1.jpg" alt="1"></h2><h3 id="条形图，填充图，阶梯图，杆图"><a href="#条形图，填充图，阶梯图，杆图" class="headerlink" title="条形图，填充图，阶梯图，杆图"></a>条形图，填充图，阶梯图，杆图</h3><p>e.g.</p>
<script type="math/tex; mode=display">
y=2e^{-0.5x}</script><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.35</span>:<span class="number">7</span>; </span><br><span class="line">y=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*x);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);bar(x,y,<span class="string">'r'</span>);</span><br><span class="line">title(<span class="string">'bar(x,y)'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>); fill(x,y,<span class="string">'b'</span>);</span><br><span class="line">title(<span class="string">'fill(x,y)'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>); stairs(x,y,<span class="string">'c'</span>);</span><br><span class="line">title(<span class="string">'stairs(x,y)'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);stem(x,y,<span class="string">'m'</span>);</span><br><span class="line">title(<span class="string">'stem(x,y)'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="散点图—scarrer"><a href="#散点图—scarrer" class="headerlink" title="散点图—scarrer()"></a>散点图—scarrer()<img src="/assets/2.jpg" alt="2"></h3><p>scarrer(x,y)</p>
<p>scarrer(x,y,s,c)</p>
<p>scarrer(x,y,s)</p>
<h3 id="误差图—errorbar"><a href="#误差图—errorbar" class="headerlink" title="误差图—errorbar()"></a>误差图—errorbar()</h3><p>errorbar(y,e)</p>
<p>errorbar(x,y,e)</p>
<h3 id="面积图—area"><a href="#面积图—area" class="headerlink" title="面积图—area()"></a>面积图—area()</h3><p>area(y)</p>
<p>area(x,y)</p>
<h3 id="复数图—plot"><a href="#复数图—plot" class="headerlink" title="复数图—plot()"></a>复数图—plot()</h3><p>plot(z)</p>
<p>e.g.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">load seamount</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),<span class="built_in">scatter</span>(x,y,<span class="number">5</span>,z)</span><br><span class="line">x2=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">30</span>);</span><br><span class="line">y=<span class="built_in">sin</span>(x);</span><br><span class="line">e=std(y)*<span class="built_in">ones</span>(<span class="built_in">size</span>(x));</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),errorbar(x,y,e)</span><br><span class="line">y=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>;<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>;<span class="number">5</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">14</span>;<span class="number">8</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">20</span>];</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>),area(y)</span><br><span class="line">grid on</span><br><span class="line">set(gca,<span class="string">'layer'</span>,<span class="string">'top'</span>)    <span class="comment">%背景透明</span></span><br><span class="line">a=<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">b=<span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">z=a+b*<span class="built_in">i</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>),<span class="built_in">plot</span>(z)</span><br></pre></td></tr></table></figure>
<h1 id><a href="#" class="headerlink" title></a><img src="/assets/3.jpg" alt="3"></h1><p> imread函数用于将图像文件读入MATLAB空间，inwrite函数用于将图像数据和色图数据写入图像文件。调用格式：</p>
<p>A=imread(fnme)                  %fname为图像文件名</p>
<p>imwrite(A,fname,fmt)        %fmt为图像文件格式</p>
<p>image和imagesc函数用于图像显示，还用colormap函数设置图像色图。</p>
<p>e.g.</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[x,cmap]=imread(<span class="string">'E:\scenery.jpg'</span>);</span><br><span class="line">image(x);colormap(cmap);</span><br><span class="line">axis image off</span><br></pre></td></tr></table></figure>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>fix, round, ceil, floor区别</p>
<p>histogram:统计出现次数</p>
<p>按列优先</p>
<p>矩阵行求和：sum(a’)’</p>
]]></content>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
</search>
